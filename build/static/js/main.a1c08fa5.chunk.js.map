{"version":3,"sources":["candy-machine.ts","connection.tsx","MintCountdown.tsx","MintButton.tsx","img4.png","Home.tsx","components/Potato nft  (2)/evel.png","components/Potato nft  (2)/dottet circle.png","components/Potato nft  (2)/header circek background.png","components/0.png","components/194.png","components/195.png","components/197.png","components/img3.png","components/img193.png","components/199.png","components/198.png","components/196.png","components/Navbar1.tsx","components/img5.png","components/Roadmap.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","isSoldOut","isActive","isPresale","isWhitelistOnly","goLiveDate","treasury","wallet","tokenMint","gatekeeper","endSettings","whitelistMintSettings","hiddenSettings","price","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","getCollectionPDA","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","mintOneToken","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","collectionPDA","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","error","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","ms","SequenceType","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","catch","reason","StopOnFailure","all","number","getUnixTs","Date","getTime","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","onSignature","context","e","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","marginBottom","fontWeight","item","MintCountdown","date","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","isMinting","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","useEffect","GatewayStatus","ACTIVE","disabled","onClick","variant","CircularProgress","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettingType","toDate","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","open","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","discountPrice","setDiscountPrice","rpcUrl","rpcHost","useWallet","useMemo","signTransaction","refreshCandyMachineState","useCallback","cndy","active","presale","token","getTokenAccountBalance","balance","valid","parseInt","amount","limit","Math","min","document","getElementById","click","connected","mintTxId","txTimeout","remaining","msg","code","window","location","reload","indexOf","toggleMintButton","now","TitanDogImage","Container","marginTop","maxWidth","position","src","img4","alt","paddingBottom","backgroundColor","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","clusterUrl","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","Navbar1","Navbar","expand","bg","Brand","paddingLeft","cursor","href","Toggle","Collapse","Nav","Link","Row","Col","paddingTop","Card","Img","textAlign","img10","Body","Title","Subtitle","Text","opacity","marginLeft","borderColor","imgpotato","img3","border","objectFit","backgroundImage","img31","zIndex","ImgOverlay","CardGroup","img198","img193","img199","img196","textDecoration","flexWrap","flexBasis","maxHeight","img0","img197","img195","img194","marginRight","Roadmap","img5","createTheme","palette","type","process","getCandyMachineId","network","Connection","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","val","LAMPORTS_PER_SOL","buyer"],"mappings":"iWAcaA,EAAwB,IAAIC,IAAYC,UACnD,+CAGIC,EAA4B,IAAIF,IAAYC,UAChD,+CA0CWE,EAAqC,uCAAG,WACnDC,EACAC,EACAC,GAHmD,iCAAAC,EAAA,6DAInDC,EAJmD,gCAM/CC,GAAO,EACPC,EAAoD,CACtDC,KAAM,EACNC,cAAe,EACfC,IAAK,MAEHC,EAAQ,EAZuC,SAapC,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAV,EAAA,sDACzBW,YAAW,WACLT,IAGJA,GAAO,EACPU,QAAQC,IAAI,4BACZH,EAAO,CAAEZ,SAAS,OACjBA,GARsB,UAUjBI,IAAQD,EAVS,uBAYvB,sBAAC,4BAAAD,EAAA,+EAEmCD,EAAWe,qBAAqB,CAC9DjB,IAHL,OAESkB,EAFT,OAKGZ,EAASY,GAAqBA,EAAkBC,MAAM,GACjDd,IACEC,EAEMA,EAAOG,KAChBM,QAAQC,IAAI,iBAAkBhB,EAAMM,GACpCD,GAAO,EACPQ,EAAOP,EAAOG,MACJH,EAAOE,eAGjBO,QAAQC,IAAI,wBAAyBhB,EAAMM,GAC3CD,GAAO,EACPO,EAAQN,IAJRS,QAAQC,IAAI,4BAA6BhB,EAAMM,GAN/CS,QAAQC,IAAI,uBAAwBhB,EAAMM,IARjD,gDAsBQD,GACHU,QAAQC,IAAI,8BAA+BhB,EAA3C,MAvBL,wDAAD,GAZuB,SAuCjBoB,EAAM,KAvCW,iEAAZ,yDAboC,cAanDd,EAbmD,OAyD/CJ,EAAWmB,wBAAwBX,IACrCR,EAAWoB,wBAAwBZ,GAErCL,GAAO,EACPU,QAAQC,IAAI,mBAAoBV,GA7DmB,kBA8D5CA,GA9D4C,4CAAH,0DAiE5CiB,EAA0C,SAC9CC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAO,CACX,CAAEC,OAAQJ,EAAOK,UAAU,EAAMC,YAAY,GAC7C,CAAEF,OAAQL,EAAwBM,UAAU,EAAOC,YAAY,GAC/D,CAAEF,OAAQH,EAAeI,UAAU,EAAOC,YAAY,GACtD,CAAEF,OAAQF,EAAqBG,UAAU,EAAOC,YAAY,GAC5D,CACEF,OAAQjC,IAAYoC,cAAcC,UAClCH,UAAU,EACVC,YAAY,GAEd,CAAEF,OAAQK,IAAkBJ,UAAU,EAAOC,YAAY,GACzD,CACEF,OAAQjC,IAAYuC,mBACpBL,UAAU,EACVC,YAAY,IAGhB,OAAO,IAAInC,IAAYwC,uBAAuB,CAC5CR,OACAK,UAAWI,IACXC,KAAMC,EAAOC,KAAK,OAITC,EAAoB,uCAAG,WAClCC,EACAC,EACAzC,GAHkC,2BAAAC,EAAA,6DAK5ByC,EAAW,IAAIhD,IAAgBM,EAAYwC,EAAc,CAC7DG,oBAAqB,cANW,SAShBjD,IAAekD,SAASnD,EAAuBiD,GAT/B,cAS5BG,EAT4B,OAW5BC,EAAU,IAAIpD,IAAemD,EAAMpD,EAAuBiD,GAX9B,SAaTI,EAAQC,QAAQC,aAAaC,MAAMR,GAb1B,cAa5BS,EAb4B,OAc5BC,EAAiBD,EAAMd,KAAKe,eAAeC,WAC3CC,EAAgBH,EAAMG,cAAcD,WACpCE,EAAiBH,EAAiBE,EAhBN,kBAkB3B,CACLE,GAAId,EACJK,UACAI,MAAO,CACLC,iBACAE,gBACAC,iBACAE,UAA8B,IAAnBF,EACXG,UAAU,EACVC,WAAW,EACXC,iBAAiB,EACjBC,WAAYV,EAAMd,KAAKwB,WACvBC,SAAUX,EAAMY,OAChBC,UAAWb,EAAMa,UACjBC,WAAYd,EAAMd,KAAK4B,WACvBC,YAAaf,EAAMd,KAAK6B,YACxBC,sBAAuBhB,EAAMd,KAAK8B,sBAClCC,eAAgBjB,EAAMd,KAAK+B,eAC3BC,MAAOlB,EAAMd,KAAKgC,SApCY,4CAAH,0DAyC3BC,EAAgB,uCAAG,WACvBC,GADuB,SAAArE,EAAA,sEAIfP,IAAYC,UAAU4E,mBAC1B,CACElC,EAAOC,KAAK,YACZ1C,EAA0B4E,WAC1BF,EAAKE,WACLnC,EAAOC,KAAK,YAEd1C,GAXmB,uCAarB,IAbqB,2CAAH,sDAgBhB6E,EAAW,uCAAG,WAClBH,GADkB,SAAArE,EAAA,sEAIVP,IAAYC,UAAU4E,mBAC1B,CACElC,EAAOC,KAAK,YACZ1C,EAA0B4E,WAC1BF,EAAKE,YAEP5E,GAVc,uCAYhB,IAZgB,2CAAH,sDAeJ8E,EAAsB,uCAAG,WACpC1B,GADoC,SAAA/C,EAAA,sEAGvBP,IAAYC,UAAU4E,mBACjC,CAAClC,EAAOC,KAAK,iBAAkBU,EAAawB,YAC5C/E,GALkC,mFAAH,sDAStBkF,EAAgB,uCAAG,WAC9BC,GAD8B,SAAA3E,EAAA,sEAGjBP,IAAYC,UAAU4E,mBACjC,CAAClC,EAAOC,KAAK,cAAesC,EAAoBJ,YAChD/E,GAL4B,mFAAH,sDAchBoF,EAA+B,uCAAG,WAC7CP,EACAQ,GAF6C,SAAA7E,EAAA,sEAKrCP,IAAYC,UAAU4E,mBAC1B,CACElC,EAAOC,KAAK,YACZ1C,EAA0B4E,WAC1BF,EAAKE,WACLnC,EAAOC,KAAK,wBACZwC,EAAaN,YAEf5E,GAbyC,uCAe3C,IAf2C,2CAAH,wDAkB/BmF,EAAY,uCAAG,WAC1B/B,EACAzB,GAF0B,iEAAAtB,EAAA,6DAIpBqE,EAAO5E,IAAYsF,QAAQC,WAJP,SAOlBC,YAAcZ,EAAKa,UAAW5D,GAPZ,UAMpB6D,EANoB,OAQxB,IAE+BpC,EAAaE,MAAMa,UAV1B,iCAWfmB,YAAclC,EAAaE,MAAMa,UAAWxC,GAX7B,mBAWqC,GAXrC,6BAYtBA,EAZsB,eAUpB8D,EAVoB,KAcpBT,EAAsB5B,EAAaO,GACnC+B,EAAoB,GACpBC,EAAiC,CAACjB,GAClCkB,EAAsB,GAjBF,KAmBxB9F,IAAYoC,cAnBY,KAoBVP,EApBU,KAqBJ+C,EAAKa,UArBD,KAsBfM,IAAWC,KAtBI,UAwBd1C,EAAaF,QAAQJ,SAAS1C,WAAW2F,kCAC7CF,IAAWC,MAzBO,4BA2BX1D,IA3BW,MAoBtB4D,WApBsB,KAqBtBC,iBArBsB,KAsBtBC,MAtBsB,KAuBtBC,SAvBsB,KA2BtBhE,UA3BsB,gBAmBEiE,cAnBF,qBA6BxBC,IAAMC,0BACJlE,IACAsC,EAAKa,UACL,EACA5D,EACAA,GAlCsB,MAoCxBF,EACE+D,EACA7D,EACAA,EACA+C,EAAKa,WAxCiB,MA0CxBc,IAAME,wBACJnE,IACAsC,EAAKa,UACLC,EACA7D,EACA,GACA,GA9BE6E,EAlBoB,yBAoDtBpD,EAAaE,MAAMc,WApDG,8BAqDxBsB,EArDwB,UAuDde,YACJ9E,EACAyB,EAAaE,MAAMc,WAAWsC,mBAzDZ,wBA2DpB,GA3DoB,OAsDtB3E,OAtDsB,MA4DtBE,YAAY,EACZD,UAAU,GA7DY,MAqDN2E,KArDM,mBA+DpBvD,EAAaE,MAAMc,WAAWwC,YA/DV,wBAgEtBlB,EAAkBiB,KAAK,CACrB5E,OAAQ8E,IACR5E,YAAY,EACZD,UAAU,IAnEU,MAqEtB0D,EArEsB,UAuEZoB,YACJ1D,EAAaE,MAAMc,WAAWsC,mBAxEd,qBA0ElB,GA1EkB,OAsEpB3E,OAtEoB,MA2EpBE,YAAY,EACZD,UAAU,GA5EU,MAqEJ2E,KArEI,8BAgFtBvD,EAAaE,MAAMgB,sBAhFG,wBAiFlBI,EAAO,IAAI5E,IAAYC,UAC3BqD,EAAaE,MAAMgB,sBAAsBI,MAlFnB,UAqFMY,YAAcZ,EAAM/C,GArF1B,WAqFlBoF,EArFkB,OAqFkC,GAC1DrB,EAAkBiB,KAAK,CACrB5E,OAAQgF,EACR9E,YAAY,EACZD,UAAU,KAGRoB,EAAaE,MAAMgB,sBAAsB0C,KAAKC,cA5F1B,wBA6FhBC,EAAyBpH,IAAYsF,QAAQC,WAEnDK,EAAkBiB,KAAK,CACrB5E,OAAQ2C,EACRzC,YAAY,EACZD,UAAU,IAEZ0D,EAAkBiB,KAAK,CACrB5E,OAAQmF,EAAuB3B,UAC/BtD,YAAY,EACZD,UAAU,IAEZ2D,EAAQgB,KAAKO,GAzGS,UA2Gd9D,EAAaF,QAAQJ,SAAS1C,WAAW+G,eAC7CJ,GA5GkB,iBA+GpBP,EAAaG,KACXN,IAAMe,yBACJhF,IACA2E,EACAG,EAAuB3B,UACvB5D,EACA,GACA,IAGJiE,EAAoBe,KAClBN,IAAMgB,wBACJjF,IACA2E,EACApF,EACA,MA9HgB,eAqItByB,EAAaE,MAAMa,YACfmD,EAAoBxH,IAAYsF,QAAQC,WAE9CM,EAAQgB,KAAKW,GACb5B,EAAkBiB,KAAK,CACrB5E,OAAQ0D,EACRxD,YAAY,EACZD,UAAU,IAEZ0D,EAAkBiB,KAAK,CACrB5E,OAAQuF,EAAkB/B,UAC1BtD,YAAY,EACZD,UAAU,IAGZwE,EAAaG,KACXN,IAAMe,yBACJhF,IACAqD,EACA6B,EAAkB/B,UAClB5D,EACA,GACAyB,EAAaE,MAAMkB,MAAMhB,aAG7BoC,EAAoBe,KAClBN,IAAMgB,wBACJjF,IACAqD,EACA9D,EACA,MAnKoB,UAuKIkD,EAAYH,EAAKa,WAvKrB,eAuKpBgC,EAvKoB,iBAwKE9C,EAAiBC,EAAKa,WAxKxB,eAwKpBiC,EAxKoB,iBA0KIzC,EAAiBC,GA1KrB,2CA0KnByC,EA1KmB,eA4KlBrE,EAAaF,QAAQJ,SAAS1C,WAAW+G,eAC7CM,GA7KsB,+DAkLbrE,EAAaF,QAAQC,QAAQuE,cAAcrE,MAChDoE,GAnLkB,eAiLhBE,EAjLgB,OAqLtB1G,QAAQC,IAAIyG,GACNC,EAAiBD,EAAejD,KAtLhB,UAuLkBO,EACtC2C,EACAH,GAzLoB,WAuLhBI,EAvLgB,OA2LtB5G,QAAQC,IAAI0G,IACRA,EA5LkB,kCA6La/C,EAAY+C,GA7LzB,eA6LdE,EA7Lc,iBA8LkBrD,EAAiBmD,GA9LnC,QA8LdG,EA9Lc,OA+LpBrC,EAAkBiB,KAAlB,MAAAjB,EACK,CACD,CACE3D,OAAQ0F,EACRxF,YAAY,EACZD,UAAU,GAEZ,CACED,OAAQ6F,EACR3F,YAAY,EACZD,UAAU,GAEZ,CACED,OAAQ+F,EACR7F,YAAY,EACZD,UAAU,GAEZ,CACED,OAAQgG,EACR9F,YAAY,EACZD,UAAU,GAEZ,CACED,OAAQ8F,EACR5F,YAAY,EACZD,UAAU,KAxNI,4DA8NtBf,QAAQ+G,MAAR,OA9NsB,0BAkOuBlD,EAC/CE,GAnOwB,4CAkOnBiD,EAlOmB,KAkOEC,EAlOF,WAsO1B1B,EAtO0B,WAuOlBpD,EAAaF,QAAQiF,YAAYC,QAAQF,EAAa,CAC1DG,SAAU,CACRjF,aAAc4B,EACdiD,sBACAtG,MAAOA,EACPuC,OAAQd,EAAaE,MAAMW,SAC3BS,KAAMA,EAAKa,UACX+C,SAAUf,EACVC,gBACAe,cAAe5G,EACf6G,gBAAiB7G,EACjB8G,qBAAsBzI,EACtB0I,aAActG,IACduG,cAAezG,gBAAcC,UAC7ByG,KAAM9I,IAAYuC,mBAClBwG,MAAO/I,IAAYgJ,oBACnBC,kBAAmBC,4BACnBC,yBAA0BnJ,IAAYoJ,4BAExCxD,kBACEA,EAAkByD,OAAS,EAAIzD,OAAoB0D,IA3P/B,mCAsObzC,KAtOa,wCAiQhB0C,YACJjG,EAAaF,QAAQJ,SAAS1C,WAC9BgD,EAAaF,QAAQJ,SAASoB,OAC9B,CAACsC,EAAcZ,GACf,CAACD,IArQmB,yCAuQtB2D,IAAIC,KAAI,SAAAC,GAAC,OAAIA,EAAEtJ,SAvQO,uCAyQxBe,QAAQC,IAAR,OAzQwB,kCA4QnB,IA5QmB,sEAAH,wDAmRnBI,EAAQ,SAACmI,GACb,OAAO,IAAI5I,SAAQ,SAAAC,GAAO,OAAIE,WAAWF,EAAS2I,S,+FC9exCC,E,0DAAAA,O,2BAAAA,I,uBAAAA,I,kCAAAA,M,KAyEL,IAAML,EAAgB,uCAAG,WAC9BjJ,EACA8D,EACAyF,EACAC,GAJ8B,qDAAAvJ,EAAA,yDAK9BwJ,EAL8B,+BAKDH,EAAaI,SAC1CC,EAN8B,+BAML,eACzBC,EAP8B,+BAOyB,SAAC9J,EAAM+J,KAC9DC,EAR8B,+BAQ2B,SAAChK,EAAM+J,GAAP,OAAe,GACxEE,EAT8B,uBAWzBjG,EAAOqB,UAXkB,sBAWD,IAAI6E,IAXH,UAaxBC,EAA8B,GAE/BF,EAfyB,kCAgBd/J,EAAWkK,mBAAmBP,GAhBhB,QAgB5BI,EAhB4B,0BAmBrBI,GACP,IAAM/D,EAAemD,EAAeY,GAC9B5E,EAAUiE,EAAWW,GAE3B,GAA4B,IAAxB/D,EAAa2C,OACf,iBAGF,IAAIqB,EAAc,IAAIC,cACtBjE,EAAakE,SAAQ,SAAAvC,GAAW,OAAIqC,EAAYG,IAAIxC,MACpDqC,EAAYI,gBAAkBT,EAAMU,UACpCL,EAAYM,WAAZ,MAAAN,EAAW,CAETtG,EAAOqB,WAFE,mBAGNI,EAAQ4D,KAAI,SAAAwB,GAAC,OAAIA,EAAExF,gBAGpBI,EAAQwD,OAAS,GACnBqB,EAAYQ,YAAZ,MAAAR,EAAW,YAAgB7E,IAG7B0E,EAAa1D,KAAK6D,IArBXD,EAAI,EAnBiB,aAmBdA,EAAIZ,EAAeR,QAnBL,mCAmBrBoB,GAnBqB,wDAmBaA,IAnBb,yCA2CLrG,EAAO+G,oBAAoBZ,GA3CtB,QA2CxBa,EA3CwB,OA6CxBC,EAAyD,GAE3DC,EAAmB,CAAEC,YAAY,EAAOd,EAAG,GAC/CtJ,QAAQC,IACN,qBACAgK,EAAW/B,OACX,sBACAQ,EAAeR,QApDa,IAAA9I,EAAA,iBAsDrBkK,GAtDqB,eAAAlK,EAAA,0DAuDtBiL,EAAmBC,EAAsB,CAC7CnL,aACAoL,kBAAmBN,EAAWX,MAI7BkB,MAAK,YAAqB,IAAlBvL,EAAiB,EAAjBA,KAAiB,EAAXO,KACbuJ,EAAgB9J,EAAMqK,MAEvBmB,OAAM,SAAAC,GAELzB,EAAagB,EAAWX,GAAIA,GACxBV,IAAiBH,EAAakC,gBAChCR,EAAiBC,YAAa,EAC9BD,EAAiBb,EAAIA,MAIvBV,IAAiBH,EAAaI,SAzEN,0CA2ElBwB,EA3EkB,0DA6ExBrK,QAAQC,IAAI,iBAAZ,OACIkK,EAAiBC,WA9EG,wBA+EtBpK,QAAQC,IAAI,WAAYkK,EAAiBb,GA/EnB,KAkFZa,EAAiBb,EAlFL,UAmFT1J,QAAQgL,IAAIV,GAnFH,iCAkFpBW,OAlFoB,KAmFpBxC,IAnFoB,kEAwF1B6B,EAAYxE,KAAK2E,GAxFS,wDAsDrBf,EAAI,EAtDiB,aAsDdA,EAAIW,EAAW/B,QAtDD,0CAsDrBoB,GAtDqB,qGAsDSA,IAtDT,2BA4F1BV,IAAiBH,EAAaI,SA5FJ,kCA6FtBjJ,QAAQgL,IAAIV,GA7FU,oBAgGbD,EAAW/B,OAhGE,UAgGiBtI,QAAQgL,IAAIV,GAhG7B,8CAgGrBW,OAhGqB,KAgGMxC,IAhGN,mDAAH,4DAqNhByC,EAAY,WACvB,OAAO,IAAIC,MAAOC,UAAY,KAG1BC,EAAkB,KAEjB,SAAeX,EAAtB,kC,4CAAO,qDAAAlL,EAAA,6DACLmL,EADK,EACLA,kBACApL,EAFK,EAELA,WAFK,IAGLD,eAHK,MAGK+L,EAHL,EAYCC,EAAiBX,EAAkBY,YACnCC,EAAYN,IACdtL,EAAO,EAdN,SAeoCL,EAAWkM,mBAClDH,EACA,CACEI,eAAe,IAlBd,cAeCrM,EAfD,OAsBLe,QAAQC,IAAI,oCAAqChB,GAE7CK,GAAO,EACX,sBAAC,sBAAAF,EAAA,yDACSE,KAAQwL,IAAcM,EAAYlM,GAD3C,uBAEGC,EAAWkM,mBAAmBH,EAAgB,CAC5CI,eAAe,IAHpB,SAKSjL,EAAM,KALf,gEAAD,GAzBK,oBAkCwBrB,EACzBC,EACAC,EACAC,EACA,UACA,GAvCC,WAkCGoM,EAlCH,8BA2CK,IAAIC,MAAM,kDA3Cf,YA6CCD,EAAa7L,IA7Cd,uBA8CDM,QAAQ+G,MAAMwE,EAAa7L,KACrB,IAAI8L,MAAM,gDA/Cf,QAkDHhM,GAAmB,OAAZ+L,QAAY,IAAZA,OAAA,EAAAA,EAAc/L,OAAQ,EAlD1B,sDAoDHQ,QAAQ+G,MAAM,uBAAd,OACI,KAAI7H,QArDL,uBAsDK,IAAIsM,MAAM,kDAtDf,eAwDCC,EAAsD,KAxDvD,oBA2DOC,EAAoBvM,EAAYoL,EAAmB,UA3D1D,QA0DDkB,EA1DC,OA4DCrL,MA5DD,+DA8DCqL,IAAkBA,EAAe/L,IA9DlC,qBA+DG+L,EAAeE,KA/DlB,iBAgEUrC,EAAImC,EAAeE,KAAKzD,OAAS,EAhE3C,aAgE8CoB,GAAK,GAhEnD,sBAiESsC,EAAOH,EAAeE,KAAKrC,IACxBuC,WAAW,iBAlEvB,uBAmEW,IAAIL,MACR,uBAAyBI,EAAKE,MAAM,gBAAgB5D,SApE3D,UAgEwDoB,EAhExD,8BAyEK,IAAIkC,MAAMO,KAAKC,UAAUP,EAAe/L,MAzE7C,yBA6EHJ,GAAO,EA7EJ,4BAgFLU,QAAQC,IAAI,UAAWhB,EAAM6L,IAAcM,GAhFtC,kBAiFE,CAAEnM,OAAMO,SAjFV,0E,+BAoFQkM,E,kFAAf,WACEvM,EACAoK,EACAT,GAHF,uBAAA1J,EAAA,sEAMsCD,EAAW8M,iBAE7C9M,EAAW+M,0BARf,cAME3C,EAAYI,gBANd,OAWQwC,EAAW5C,EAAY6C,mBAEvBC,EAAkB9C,EAAY+C,WAAWH,GACzCI,EAAqBF,EAAgBG,SAAS,UAE9CC,EAAO,CAACF,EADM,CAAEG,SAAU,SAAU5D,eAf5C,UAmBoB3J,EAAWwN,YAAY,sBAAuBF,GAnBlE,aAmBQG,EAnBR,QAoBU7F,MApBV,uBAqBU,IAAIyE,MAAM,mCAAqCoB,EAAI7F,MAAM8F,SArBnE,iCAuBSD,EAAIE,QAvBb,6C,+BA0Be9N,E,kFAAf,WACEC,EACAC,EACAC,GAHF,mCAAAC,EAAA,6DAIE0J,EAJF,+BAI2B,SACzBzJ,EALF,gCAOMC,GAAO,EACPC,EAAwC,CAC1CC,KAAM,EACNC,cAAe,EACfC,IAAK,MAEHC,EAAQ,EAbd,SAciB,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAV,EAAA,sDACzBW,YAAW,WACLT,IAGJA,GAAO,EACPU,QAAQC,IAAI,4BACZH,EAAO,CAAEZ,SAAS,OACjBA,GACH,IACES,EAAQR,EAAW4N,YACjB9N,GACA,SAAC6N,EAAQE,GACP1N,GAAO,EACPC,EAAS,CACPG,IAAKoN,EAAOpN,IACZF,KAAMwN,EAAQxN,KACdC,cAAe,GAEbqN,EAAOpN,KACTM,QAAQC,IAAI,yBAA0B6M,EAAOpN,KAC7CI,EAAOP,KAEPS,QAAQC,IAAI,yBAA0B6M,GACtCjN,EAAQN,MAGZuJ,GAEF,MAAOmE,GACP3N,GAAO,EACPU,QAAQ+G,MAAM,oBAAqB9H,EAAMgO,GA/BlB,UAiCjB3N,IAAQD,EAjCS,uBAmCvB,sBAAC,4BAAAD,EAAA,+EAEmCD,EAAWe,qBAAqB,CAC9DjB,IAHL,OAESkB,EAFT,OAKGZ,EAASY,GAAqBA,EAAkBC,MAAM,GACjDd,IACEC,EAEMA,EAAOG,KAChBM,QAAQC,IAAI,iBAAkBhB,EAAMM,GACpCD,GAAO,EACPQ,EAAOP,EAAOG,MACJH,EAAOE,eAGjBO,QAAQC,IAAI,wBAAyBhB,EAAMM,GAC3CD,GAAO,EACPO,EAAQN,IAJRS,QAAQC,IAAI,4BAA6BhB,EAAMM,GAN/CS,QAAQC,IAAI,uBAAwBhB,EAAMM,IARjD,gDAsBQD,GACHU,QAAQC,IAAI,8BAA+BhB,EAA3C,MAvBL,wDAAD,GAnCuB,SA8DjBoB,EAAM,KA9DW,iEAAZ,yDAdjB,cAcEd,EAdF,OAiFMJ,EAAWmB,wBAAwBX,IACrCR,EAAWoB,wBAAwBZ,GACrCL,GAAO,EACPU,QAAQC,IAAI,mBAAoBV,GApFlC,kBAqFSA,GArFT,4C,wBAuFO,SAASc,EAAMmI,GACpB,OAAO,IAAI5I,SAAQ,SAAAC,GAAO,OAAIE,WAAWF,EAAS2I,Q,kbCzhB9C0E,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTC,QAASJ,EAAMK,QAAQ,GACvB,QAAS,CACPC,OAAQN,EAAMK,QAAQ,IACtBE,MAAOP,EAAMK,QAAQ,GACrBG,OAAQR,EAAMK,QAAQ,GACtBF,QAAS,OACTM,cAAe,SACfC,aAAc,SACdC,WAAY,SACZC,eAAgB,SAChBC,WAAY,UACZC,MAAO,QACPC,aAAc,EACdC,SAAU,KAGd9O,KAAM,CACJiO,QAAS,OACTG,OAAQ,EACRW,aAAcjB,EAAMK,QAAQ,IAC5BG,OAAQR,EAAMK,QAAQ,KACtBD,QAASJ,EAAMK,QAAQ,GACvBI,cAAe,SACfC,aAAc,SACdC,WAAY,SACZC,eAAgB,SAChBC,WAAY,UACZC,MAAO,QACPC,aAAc,EACdG,WAAY,OACZF,SAAU,IAEZG,KAAM,CACJD,WAAY,OACZF,SAAU,SAoBHI,EAA8C,SAAC,GAKrD,IAJLC,EAII,EAJJA,KACAlP,EAGI,EAHJA,OACAmP,EAEI,EAFJA,MACAC,EACI,EADJA,WAEMC,EAAU1B,IAqChB,OAAIuB,EAEA,cAAC,IAAD,CACEA,KAAMA,EACNE,WAAYA,EACZE,SAzCkB,SAAC,GAMG,IAL1BC,EAKyB,EALzBA,KACAC,EAIyB,EAJzBA,MACAC,EAGyB,EAHzBA,QACAC,EAEyB,EAFzBA,QAIA,OADAF,GAAgB,GAAPD,EADgB,EADzBI,UAIS3P,EAAS,sBAAM4P,UAAWP,EAAQtP,KAAzB,SAAgCC,IAAiB,KAG/D,sBAAK4P,UAAWP,EAAQtB,KAAMoB,MAAOA,EAArC,UACE,eAACU,EAAA,EAAD,CAAOC,UAAW,EAAlB,UACE,sBAAMF,UAAWP,EAAQL,KAAzB,SACGQ,EAAQ,GAAR,WAAiBA,GAAUA,IAE9B,0CAEF,eAACK,EAAA,EAAD,CAAOC,UAAW,EAAlB,UACE,sBAAMF,UAAWP,EAAQL,KAAzB,SACGS,EAAU,GAAV,WAAmBA,GAAYA,IAElC,2CAEF,eAACI,EAAA,EAAD,CAAOC,UAAW,EAAlB,UACE,sBAAMF,UAAWP,EAAQL,KAAzB,SACGU,EAAU,GAAV,WAAmBA,GAAYA,IAElC,iDAgBD,M,2BC3GEK,EAAYC,kBAAOC,IAAPD,CAAH,sOAWTE,EAAa,SAAC,GAUpB,IATLC,EASI,EATJA,OACAvN,EAQI,EARJA,aACAwN,EAOI,EAPJA,UACA/M,EAMI,EANJA,SAOA,EAA+CgN,uBAAvCC,EAAR,EAAQA,oBAAqBC,EAA7B,EAA6BA,cAC7B,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACJJ,IAAkBK,gBAAcC,QAAUJ,IAC5CN,IACAO,GAAW,MAEZ,CAACH,EAAeE,EAASC,EAAYP,IAmBxC,OACE,cAACJ,EAAD,CACEe,SAAUL,GAAWL,IAAc/M,EACnC0N,QAAO,sBAAE,sBAAAlR,EAAA,yDACP6Q,GAAW,GACK,OAAZ9N,QAAY,IAAZA,MAAcE,MAAMO,UAApB,OAAgCT,QAAhC,IAAgCA,MAAcE,MAAMc,WAFjD,oBAGD2M,IAAkBK,gBAAcC,OAH/B,gBAIHH,GAAW,GAJR,sCAMGJ,IANH,gDASCH,IATD,QAULO,GAAW,GAVN,4CAaTM,QAAQ,YAfV,SAjBA,OAAIpO,QAAJ,IAAIA,KAAcE,MAAMM,UACf,WACEgN,EACF,cAACa,EAAA,EAAD,IAEK,OAAZrO,QAAY,IAAZA,KAAcE,MAAMQ,WAApB,OACAV,QADA,IACAA,KAAcE,MAAMS,gBAEb,iBACEkN,GAAO,OAAI7N,QAAJ,IAAIA,KAAcE,MAAMc,WACjC,cAACqN,EAAA,EAAD,IAGF,UCrDI,MAA0B,iCCyBnCC,EAAgBlB,kBAAOmB,IAAPnB,CAAH,sOAWboB,EAAgBpB,UAAOqB,IAAV,0BA8abC,EAAmB,SACvB1O,GACsB,IAAD,EACrB,OACEA,EAAaE,MAAMO,UAAnB,UACAT,EAAaE,MAAMe,mBADnB,OACA,EAAgC0N,eAAerC,KAExCsC,YAAO5O,EAAaE,MAAMe,YAAYyH,QAGxCkG,YACL5O,EAAaE,MAAMU,WACfZ,EAAaE,MAAMU,WACnBZ,EAAaE,MAAMQ,UACnB,IAAIhE,KAAU,IAAIkM,MAAOC,UAAY,UACrC7C,IAIO6I,EAxbF,SAACC,GAAsB,IAAD,MACjC,EAA0ClB,oBAAS,GAAnD,mBAAOmB,EAAP,KAAsBC,EAAtB,KACA,EAAwCpB,qBAAxC,mBAAO5N,EAAP,KAAqBiP,EAArB,KACA,EAAoCrB,mBAAqB,CACvDsB,MAAM,EACNxE,QAAS,GACTyE,cAAUnJ,IAHZ,mBAAOoJ,EAAP,KAAmBC,EAAnB,KAKA,EAAgCzB,oBAAS,GAAzC,mBAAOnN,EAAP,KAAiB6O,EAAjB,KACA,EAA8B1B,qBAA9B,mBAAO2B,EAAP,KAAgBC,EAAhB,KACA,EAA4C5B,qBAA5C,mBAAOtN,EAAP,KAAuBmP,GAAvB,KACA,GAA8C7B,oBAAS,GAAvD,qBAAO8B,GAAP,MAAwBC,GAAxB,MACA,GAAkC/B,oBAAS,GAA3C,qBAAOlN,GAAP,MAAkBkP,GAAlB,MACA,GAA0ChC,qBAA1C,qBAAOiC,GAAP,MAAsBC,GAAtB,MAEMC,GAASjB,EAAMkB,QACflP,GAASmP,cAETzQ,GAAe0Q,mBAAQ,WAC3B,GACGpP,IACAA,GAAOqB,WACPrB,GAAO+G,qBACP/G,GAAOqP,gBAKV,MAAO,CACLhO,UAAWrB,GAAOqB,UAClB0F,oBAAqB/G,GAAO+G,oBAC5BsI,gBAAiBrP,GAAOqP,mBAEzB,CAACrP,KAEEsP,GAA2BC,sBAAW,sBAAC,gDAAApT,EAAA,yDACtCuC,GADsC,qDAKvCsP,EAAMrP,eALiC,0CAOpBF,YACjBC,GACAsP,EAAMrP,eACNqP,EAAM9R,YAV+B,UAOjCsT,EAPiC,OAYnCC,GACE,OAAJD,QAAI,IAAJA,GAAA,UAAAA,EAAMpQ,MAAMU,kBAAZ,eAAwBR,aAAa,IAAIwI,MAAOC,UAAY,IAC1D2H,GAAU,EAdyB,OAgBnCF,QAhBmC,IAgBnCA,MAAMpQ,MAAMgB,sBAhBuB,wBAmBnCoP,EAAKpQ,MAAMgB,sBAAsBsP,WAC/BF,EAAKpQ,MAAMU,YACX0P,EAAKpQ,MAAMU,WAAWR,YAAa,IAAIwI,MAAOC,UAAY,OAE5D2H,GAAU,GAGRF,EAAKpQ,MAAMgB,sBAAsB2O,cACnCC,GAAiBQ,EAAKpQ,MAAMgB,sBAAsB2O,gBAElDC,QAAiB9J,GAGZsK,EAAKpQ,MAAMgB,sBAAsBsP,UACpCF,EAAKpQ,MAAMS,iBAAkB,IAI3BW,EAAO,IAAI5E,IAAYC,UAC3B2T,EAAKpQ,MAAMgB,sBAAsBI,MAtCE,UAwChBY,YAAcZ,EAAM9B,GAAa2C,WAxCjB,eAwC/BsO,EAxC+B,OAwC6B,GAxC7B,oBA2Cb3B,EAAM9R,WAAW0T,uBACrCD,GA5CiC,QA2C7BE,EA3C6B,OA8C/BC,EAAQC,SAASF,EAAQ1S,MAAM6S,QAAU,EAE7CnB,GAAmBiB,GACnBL,EAAUC,GAAWI,GAAUL,EAjDI,mDAmDnCZ,IAAmB,GAEfW,EAAKpQ,MAAMS,kBACb4P,GAAS,GAEX1S,QAAQC,IAAI,wDACZD,QAAQC,IAAR,MAzDmC,QA6DvC,OAAIwS,QAAJ,IAAIA,GAAJ,UAAIA,EAAMpQ,MAAMe,mBAAhB,OAAI,EAAyB0N,eAAerC,OAC1CkD,EAAWZ,YAAO0B,EAAKpQ,MAAMe,YAAYyH,SAEvC4H,EAAKpQ,MAAMe,YAAYyH,OAAOtI,YAC9B,IAAIwI,MAAOC,UAAY,MAEvB0H,GAAS,IAIb,OAAID,QAAJ,IAAIA,GAAJ,UAAIA,EAAMpQ,MAAMe,mBAAhB,OAAI,EAAyB0N,eAAemC,QACtCC,EAAQC,KAAKC,IACfX,EAAKpQ,MAAMe,YAAYyH,OAAOtI,WAC9BkQ,EAAKpQ,MAAMC,gBAETmQ,EAAKpQ,MAAMG,cAAgB0Q,EAC7BtB,GAAkBsB,EAAQT,EAAKpQ,MAAMG,gBAErCoP,GAAkB,GAClBa,EAAKpQ,MAAMM,WAAY,IAGzBiP,GAAkBa,EAAKpQ,MAAMI,gBAG3BgQ,EAAKpQ,MAAMM,YACb+P,GAAS,GAGXjB,EAAagB,EAAKpQ,MAAMO,SAAW8P,GACnCX,GAAcU,EAAKpQ,MAAMQ,UAAY8P,GACrCvB,EAAgBqB,GA5FuB,kDA8FvCzS,QAAQC,IAAI,oDACZD,QAAQC,IAAR,MA/FuC,kEAkG1C,CAAC0B,GAAcsP,EAAMrP,eAAgBqP,EAAM9R,aAExCuQ,GAAM,uCAAG,oCAAAtQ,EAAA,kEAEX+R,GAAiB,GACjB,UAAAkC,SAASC,eAAe,oBAAxB,SAAsCC,UAClCtQ,GAAOuQ,WAAP,OAAoBrR,QAApB,IAAoBA,KAAcF,SAAWgB,GAAOqB,WAJ7C,iCAMDJ,YAAa/B,EAAcc,GAAOqB,WANjC,UAKHmP,EALG,OAOP,GAEElU,EAAc,CAAEG,KAAK,IACrB+T,EAVK,kCAWQzU,YACbyU,EACAxC,EAAMyC,UACNzC,EAAM9R,YACN,GAfK,QAWPI,EAXO,eAmBLA,IAAWA,EAAOG,KAIpBkS,GADI+B,EAAYlR,EAAkB,GAElCgP,EAAatP,EAAaE,MAAMO,SAAW+Q,EAAY,GACvDxR,EAAaE,MAAMM,UAA0B,IAAdgR,EAC/BnC,EAAc,CACZH,MAAM,EACNxE,QAAS,mCACTyE,SAAU,aAGZE,EAAc,CACZH,MAAM,EACNxE,QAAS,iCACTyE,SAAU,UAnCL,0DAwCPzE,EAAU,KAAM+G,KAAO,oCACtB,KAAMA,IASU,MAAf,KAAMC,MACRhH,EAAO,YACPiH,OAAOC,SAASC,UACQ,MAAf,KAAMH,OACfhH,EAAO,sCAZJ,KAAMA,QAEA,KAAMA,QAAQoH,QAAQ,SAC/BpH,EAAO,YACE,KAAMA,QAAQoH,QAAQ,WAC/BpH,EAAO,wDAJPA,EAAU,yCAed2E,EAAc,CACZH,MAAM,EACNxE,UACAyE,SAAU,UAIZiB,KAjEW,yBAmEXpB,GAAiB,GAnEN,6EAAH,qDAuEN+C,GAAmB,WACvB,IAAIxB,GAAU9P,GAAYC,GAEtB6P,IACEvQ,EAAcE,MAAMS,kBAAoB+O,KAC1Ca,GAAS,GAEPhB,GAAW3G,KAAKoJ,OAASzC,EAAQ1G,YACnC0H,GAAS,IAKX7P,IACAV,EAAcE,MAAMU,YACpBZ,EAAcE,MAAMU,WAAWR,aAAc,IAAIwI,MAAOC,UAAY,KAEpE+G,GAAc5P,EAAcE,MAAMQ,WAAY,GAGhD4O,EAAatP,EAAcE,MAAMO,SAAW8P,IAG9CxC,qBAAU,WACRqC,OACC,CACD5Q,GACAsP,EAAMrP,eACNqP,EAAM9R,WACNoT,KAGF,IAAM6B,GAAgB7E,kBAAO,MAAPA,CAAH,0KASnB,OACE,qBAAKJ,UAAU,aAAf,SACE,eAACkF,EAAA,EAAD,CAAW3F,MAAO,CAAE4F,UAAW,KAA/B,UACE,eAACD,EAAA,EAAD,CAAWE,SAAS,KAAK7F,MAAO,CAAE8F,SAAU,YAA5C,UACE,cAACJ,GAAD,CAAeK,IAAKC,EAAMC,IAAI,aAC9B,cAACvF,EAAA,EAAD,CACEV,MAAO,CACLlB,QAAS,GACToH,cAAe,GACfC,gBAAiB,UACjB1G,aAAc,IALlB,SAQIlL,GAAOuQ,UAGP,qCACGrR,GACC,eAAC2S,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVhH,eAAe,SACfiH,KAAK,SAJP,UAME,eAACH,EAAA,EAAD,CAAMvG,MAAI,EAAC2G,GAAI,EAAf,UACE,cAACC,EAAA,EAAD,CAAY5E,QAAQ,QAAQrC,MAAM,gBAAlC,uBAGA,cAACiH,EAAA,EAAD,CACE5E,QAAQ,KACRrC,MAAM,cACNQ,MAAO,CACLJ,WAAY,QAJhB,mBAOM7L,QAGR,eAACqS,EAAA,EAAD,CAAMvG,MAAI,EAAC2G,GAAI,EAAf,UACE,cAACC,EAAA,EAAD,CAAY5E,QAAQ,QAAQrC,MAAM,gBAAlC,SACG2D,IAAmBG,GAChB,iBACA,UAEN,cAACmD,EAAA,EAAD,CACE5E,QAAQ,KACRrC,MAAM,cACNQ,MAAO,CAAEJ,WAAY,QAHvB,SAKG,iBAAAuD,IAAmBG,GACXoD,IAAaC,SAASrD,IACtBoD,IAAaC,SAChBlT,EAAaE,MAAMkB,aAI7B,cAACuR,EAAA,EAAD,CAAMvG,MAAI,EAAC2G,GAAI,EAAf,SACGtS,GAAY8O,GAAW3G,KAAKoJ,MAAQzC,EAAQ1G,UAC3C,qCACE,cAAC,EAAD,CAEEyD,KAAMoC,EAAiB1O,GACvBuM,MAAO,CAAEV,eAAgB,YACzBzO,OAAO,YACPoP,WAAYuF,IAJR,eAMN,cAACiB,EAAA,EAAD,CACE5E,QAAQ,UACR+E,MAAM,SACN/H,QAAQ,QACRmB,MAAO,CAAEJ,WAAY,QAJvB,+BAUF,qCACE,cAAC,EAAD,CAEEG,KAAMoC,EAAiB1O,GACvBuM,MAAO,CAAEV,eAAgB,YACzBzO,OACc,OAAZ4C,QAAY,IAAZA,GAAA,UAAAA,EAAcE,aAAd,SAAqBM,WACpB+O,GAAW3G,KAAKoJ,MAAQzC,EAAQ1G,UAC7B,YACAnI,GACA,UACA,OAEN8L,WAAYuF,IAXR,UAaLrR,IACCV,EAAaE,MAAMU,YACnBZ,EAAaE,MAAMU,WAAWR,YAC5B,IAAIwI,MAAOC,UAAY,KACvB,cAACmK,EAAA,EAAD,CACE5E,QAAQ,UACR+E,MAAM,SACN/H,QAAQ,QACRmB,MAAO,CAAEJ,WAAY,QAJvB,uCAcd,cAACqC,EAAD,UACe,OAAZxO,QAAY,IAAZA,KAAcE,MAAMO,UAApB,OACDT,QADC,IACDA,KAAcE,MAAMc,YACpBF,GAAOqB,WACPrB,GAAOqP,gBACL,cAAC,kBAAD,CACErP,OAAQ,CACNqB,UACErB,GAAOqB,WACP,IAAIxF,YAAUF,KAEhB0T,gBAAiBrP,GAAOqP,iBAE1B7M,kBAAiB,OACftD,QADe,IACfA,GADe,UACfA,EAAcE,aADC,iBACf,EAAqBc,kBADN,aACf,EAAiCsC,kBAEnC8P,WAAYrD,GACZsD,QAAS,CAAEC,eAAe,GAZ5B,SAcE,cAAC,EAAD,CACEtT,aAAcA,EACdwN,UAAWuB,EACXxB,OAAQA,GACR9M,SAAUA,GAAaC,IAAagP,OAIxC,cAAC,EAAD,CACE1P,aAAcA,EACdwN,UAAWuB,EACXxB,OAAQA,GACR9M,SAAUA,GAAaC,IAAagP,UA9H5C,cAACpB,EAAD,kCA+IN,cAACiF,EAAA,EAAD,CACErE,KAAME,EAAWF,KACjBsE,iBAAkB,IAClBC,QAAS,kBAAMpE,EAAc,2BAAKD,GAAN,IAAkBF,MAAM,MAHtD,SAKE,cAACwE,EAAA,EAAD,CACED,QAAS,kBAAMpE,EAAc,2BAAKD,GAAN,IAAkBF,MAAM,MACpDC,SAAUC,EAAWD,SAFvB,SAIGC,EAAW1E,kB,iFC1cT,OAA0B,iCCA1B,OAA0B,0CCA1B,OAA0B,qDCA1B,OAA0B,8BCA1B,OAA0B,gCCA1B,OAA0B,gCCA1B,OAA0B,gCCA1B,OAA0B,iCCA1B,OAA0B,mCCA1B,OAA0B,gCCA1B,OAA0B,gCCA1B,OAA0B,gCCi+B1BiJ,GAx8BC,WACd,OACE,sBAAK3G,UAAU,UAAf,UACE,eAAC4G,EAAA,EAAD,CAAQC,OAAO,KAAKzF,QAAQ,OAAO0F,GAAG,OAAtC,UACE,cAACF,EAAA,EAAOG,MAAR,CACExH,MAAO,CAAEyH,YAAa,OAAQC,OAAQ,WACtCC,KAAK,QAFP,yBAMA,cAACN,EAAA,EAAOO,OAAR,CAAe,gBAAc,0BAC7B,eAACP,EAAA,EAAOQ,SAAR,CAAiB7T,GAAG,wBAApB,UACE,cAAC8T,EAAA,EAAIC,KAAL,CAAU/T,GAAG,OAAOgM,MAAO,CAAE0H,OAAQ,WAAaC,KAAK,SAAvD,mBAGA,cAACG,EAAA,EAAIC,KAAL,CAAU/T,GAAG,OAAOgM,MAAO,CAAE0H,OAAQ,WAAaC,KAAK,WAAvD,qBAGA,cAACG,EAAA,EAAIC,KAAL,CAAU/T,GAAG,OAAOgM,MAAO,CAAE0H,OAAQ,WAAaC,KAAK,cAAvD,wBAGA,cAACG,EAAA,EAAIC,KAAL,CAAU/T,GAAG,OAAOgM,MAAO,CAAE0H,OAAQ,WAAaC,KAAK,SAAvD,qBAGA,cAACG,EAAA,EAAIC,KAAL,CACE/T,GAAG,iBACHgM,MAAO,CAAE0H,OAAQ,WACjBC,KAAK,iBAHP,kCAUJ,qBAAKlH,UAAU,aAAf,SACE,cAAC,IAAD,UACE,eAACuH,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKjI,MAAO,CAAEkI,WAAY,KAAMhC,cAAe,OAA/C,UACE,cAACiC,EAAA,EAAKC,IAAN,CACEvG,QAAQ,MACR7B,MAAO,CACLqI,UAAW,SACXvJ,QAAS,QAEXiH,IAAKuC,KAEP,cAACH,EAAA,EAAD,CACEnI,MAAO,CACL4F,UAAW,QACX3G,MAAO,OACPoJ,UAAW,SACXlC,gBAAiB,WACjB+B,WAAY,MANhB,SASE,eAACC,EAAA,EAAKI,KAAN,CAAW9H,UAAU,UAArB,UACE,cAAC0H,EAAA,EAAKK,MAAN,CAAY/H,UAAU,YAAtB,6BACA,cAAC0H,EAAA,EAAKM,SAAN,CAAehI,UAAU,eAAzB,gCAIA,oBAAIA,UAAU,eAAd,yBACA,cAAC0H,EAAA,EAAKO,KAAN,CAAWjI,UAAU,UAAUT,MAAO,CAAE2I,QAAS,OAAjD,kFAIA,cAAC,IAAD,CACElI,UAAU,YACVT,MAAO,CAAE4F,UAAW,KAAMgD,WAAY,MAFxC,kCAUN,cAACX,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACE1H,UAAU,kBACVT,MAAO,CACLT,WACE,mDACFL,OAAQ,MACRD,MAAO,MACP2G,UAAW,OACXnG,aAAc,OACdoJ,YAAa,WATjB,SAYE,cAACV,EAAA,EAAKI,KAAN,UACE,sBAAKvI,MAAO,CAAEN,SAAU,UAAxB,yBAEE,cAACyI,EAAA,EAAKC,IAAN,CAAUrC,IAAK+C,qBAQ7B,qBAAKrI,UAAU,aAAf,SACE,cAAC,IAAD,UACE,eAACuH,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACEnI,MAAO,CACLf,MAAO,QACPM,WACE,mDACFE,aAAc,QALlB,SAQE,eAAC0I,EAAA,EAAKI,KAAN,CACEvI,MAAO,CACLT,WACE,mDACFE,aAAc,QAJlB,UAOE,cAAC0I,EAAA,EAAKC,IAAN,CAAUvG,QAAQ,MAAMkE,IAAKgD,KAC7B,sBAAK/I,MAAO,CAAEqI,UAAW,UAAzB,UACE,0CACA,kDAKR,eAACJ,EAAA,EAAD,WACE,oBACEjU,GAAG,QACHgM,MAAO,CACLR,MAAO,UACP0G,cAAe,SACfmC,UAAW,UALf,sBAUA,oBAAIrI,MAAO,CAAEqI,UAAW,UAAxB,8BACA,cAACF,EAAA,EAAD,CACEnI,MAAO,CACLmG,gBAAiB,UACjBkC,UAAW,UAHf,SAME,cAACF,EAAA,EAAKI,KAAN,UACE,qBAAKvI,MAAO,CAAEf,MAAO,QAArB,2VAcZ,sBAAKwB,UAAU,aAAf,UACE,cAAC0H,EAAA,EAAD,CACEnI,MAAO,CACLgJ,OAAQ,OACR/J,MAAO,OACPoJ,UAAW,SACXlC,gBAAiB,UACjBtH,QAAS,SACToK,UAAW,QACXC,gBAAgB,OAAD,OAASC,GAAT,MARnB,SAWE,eAAChB,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKC,IAAN,CACEpI,MAAO,CAAEd,OAAQ,OAAQD,MAAO,OAAQmK,OAAQ,KAChDrD,IAAKoD,KAEP,eAAChB,EAAA,EAAKkB,WAAN,WACE,eAAClB,EAAA,EAAKK,MAAN,CAAYxU,GAAG,aAAayM,UAAU,OAAtC,UACG,IADH,iBAKA,oBACET,MAAO,CACLJ,WAAY,MACZF,SAAU,OACVoG,SAAU,WACVsD,OAAQ,KALZ,oCAUA,qBACEpJ,MAAO,CACLJ,WAAY,MACZF,SAAU,OACVF,MAAO,WAJX,UAOG,IAPH,iBAUA,cAAC2I,EAAA,EAAKO,KAAN,CAAWjI,UAAU,UAAUT,MAAO,CAAEN,SAAU,UAAlD,kFAIA,cAAC,IAAD,CACEe,UAAU,YACVT,MAAO,CAAE4F,UAAW,KAAMgD,WAAY,MAFxC,0CASN,cAAC,IAAD,OAGF,qBAAKnI,UAAU,aAAf,SACE,cAACuH,EAAA,EAAD,UACE,eAACsB,EAAA,EAAD,CAAWtV,GAAG,UAAd,UACE,cAACiU,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACE1H,UAAU,SACVT,MAAO,CACLf,MAAO,QACPkH,gBAAiB,UACjB1G,aAAc,QALlB,SAQE,eAAC0I,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKC,IAAN,CAAUvG,QAAQ,MAAMkE,IAAKwD,KAC7B,qBAAK9I,UAAU,MAAf,SACE,gCACE,8CACA,uCACA,wBACET,MAAO,CACLmG,gBAAiB,UACjB1G,aAAc,OACdD,MAAO,QACPP,MAAO,QALX,gCAeV,cAACgJ,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACE1H,UAAU,SACVT,MAAO,CACLf,MAAO,QACPkH,gBAAiB,UACjB1G,aAAc,QALlB,SAQE,eAAC0I,EAAA,EAAKI,KAAN,CAAWvI,MAAO,GAAlB,UACE,cAACmI,EAAA,EAAKC,IAAN,CAAUvG,QAAQ,MAAMkE,IAAKyD,KAC7B,qBAAK/I,UAAU,MAAf,SACE,gCACE,8CACA,uCACA,wBACET,MAAO,CACLmG,gBAAiB,UACjB1G,aAAc,OACdD,MAAO,QACPP,MAAO,QALX,gCAeV,cAACgJ,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACE1H,UAAU,SACVT,MAAO,CACLf,MAAO,QACPkH,gBAAiB,UACjB1G,aAAc,QALlB,SAQE,eAAC0I,EAAA,EAAKI,KAAN,CAAWvI,MAAO,GAAlB,UACE,cAACmI,EAAA,EAAKC,IAAN,CAAUvG,QAAQ,MAAMkE,IAAK0D,KAC7B,qBAAKhJ,UAAU,MAAf,SACE,gCACE,8CACA,uCACA,wBACET,MAAO,CACLmG,gBAAiB,UACjB1G,aAAc,OACdD,MAAO,QACPP,MAAO,QALX,gCAeV,cAACgJ,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACE1H,UAAU,SACVT,MAAO,CACLf,MAAO,QACPkH,gBAAiB,UACjB1G,aAAc,QALlB,SAQE,eAAC0I,EAAA,EAAKI,KAAN,CAAWvI,MAAO,GAAlB,UACE,cAACmI,EAAA,EAAKC,IAAN,CAAUvG,QAAQ,MAAMkE,IAAK2D,KAC7B,qBAAKjJ,UAAU,MAAf,SACE,gCACE,8CACA,uCACA,wBACET,MAAO,CACLmG,gBAAiB,UACjB1G,aAAc,OACdD,MAAO,QACPP,MAAO,QALX,uCAmBhB,qBAAKwB,UAAU,aAAf,SACE,cAAC,IAAD,UACE,eAACuH,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKjI,MAAO,CAAEqI,UAAW,QAAzB,UACE,cAACF,EAAA,EAAD,CACEnI,MAAO,CACLf,MAAO,OACPoJ,UAAW,OACXlC,gBAAiB,WACjB6C,OAAQ,QALZ,SAQE,cAACb,EAAA,EAAKI,KAAN,UACE,oBACEvI,MAAO,CACLR,MAAO,UACPI,WAAY,MACZF,SAAU,UAEZ1L,GAAG,QANL,2BAYJ,cAACmU,EAAA,EAAD,CACEnI,MAAO,CACLf,MAAO,OACPoJ,UAAW,OACXlC,gBAAiB,WACjB6C,OAAQ,QALZ,SAQE,cAACb,EAAA,EAAKI,KAAN,UACE,oBACEvI,MAAO,CACLR,MAAO,UACPI,WAAY,MACZF,SAAU,UAJd,2BAWJ,oBAAIM,MAAO,CAAER,MAAO,WAApB,uRAQF,cAACyI,EAAA,EAAD,UACE,qBAAKxH,UAAU,aAAf,SACE,qBAAKA,UAAU,WAAf,SACE,qCACE,eAAC0H,EAAA,EAAD,CACEnI,MAAO,CACLf,MAAO,OACPkH,gBAAiB,WACjB6C,OAAQ,QAJZ,UAQE,eAACb,EAAA,EAAKI,KAAN,WACE,eAACJ,EAAA,EAAKK,MAAN,CAAYxI,MAAO,CAAEN,SAAU,QAA/B,UACE,sBAAMM,MAAO,CAAEN,SAAU,QAAzB,iBADF,0DAIA,cAACyI,EAAA,EAAKK,MAAN,OAEF,0BAGF,eAACL,EAAA,EAAD,CACEnI,MAAO,CACLf,MAAO,OACPkH,gBAAiB,WACjB6C,OAAQ,QAJZ,UAQE,cAACb,EAAA,EAAKI,KAAN,UACE,eAACJ,EAAA,EAAKK,MAAN,CAAYxI,MAAO,CAAEN,SAAU,QAA/B,UACE,sBAAMM,MAAO,CAAEN,SAAU,QAAzB,iBADF,kEAMF,0BAGF,eAACyI,EAAA,EAAD,CACEnI,MAAO,CACLf,MAAO,OACPkH,gBAAiB,WACjB6C,OAAQ,QAJZ,UAQE,cAACb,EAAA,EAAKI,KAAN,UACE,eAACJ,EAAA,EAAKK,MAAN,CAAYxI,MAAO,CAAEN,SAAU,QAA/B,UACE,sBAAMM,MAAO,CAAEN,SAAU,QAAzB,iBADF,sEAMF,0BAGF,eAACyI,EAAA,EAAD,CACEnI,MAAO,CACLf,MAAO,OACPkH,gBAAiB,WACjB6C,OAAQ,QAJZ,UAQE,cAACb,EAAA,EAAKI,KAAN,UACE,eAACJ,EAAA,EAAKK,MAAN,CAAYxI,MAAO,CAAEN,SAAU,QAA/B,UACE,sBAAMM,MAAO,CAAEN,SAAU,QAAzB,iBADF,4EAMF,0CAShB,qBAAK1L,GAAG,UAAUyM,UAAU,aAA5B,SACE,sBAAKA,UAAU,YAAf,UACE,cAAC0H,EAAA,EAAD,CACEnI,MAAO,CACLf,MAAO,OACPoJ,UAAW,SACXlC,gBAAiB,UACjB6C,OAAQ,QALZ,SAQE,eAACb,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKK,MAAN,uBACA,cAACL,EAAA,EAAKJ,KAAN,CAAWJ,KAAK,IAAI3H,MAAO,CAAE2J,eAAgB,QAA7C,SACE,oBAAI3J,MAAO,CAAER,MAAO,UAAWmK,eAAgB,QAA/C,4CAMN,qBAAKlJ,UAAU,aAAf,SACE,cAAC,IAAD,UACE,eAACuH,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACE1H,UAAU,UACVT,MAAO,CACLf,MAAO,QACPH,QAAS,KACTuJ,UAAW,SACXlC,gBAAiB,YANrB,SAUE,eAACgC,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKK,MAAN,CACExI,MAAO,CAAEN,SAAU,SAAUiJ,QAAS,OADxC,uCAKA,cAACR,EAAA,EAAKO,KAAN,CAAW1I,MAAO,CAAEN,SAAU,QAA9B,oFAON,cAACuI,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACE1H,UAAU,UACVT,MAAO,CACLf,MAAO,QACPH,QAAS,KACTuJ,UAAW,SACXlC,gBAAiB,YANrB,SASE,eAACgC,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKK,MAAN,CACExI,MAAO,CAAEN,SAAU,SAAUiJ,QAAS,OADxC,uBAKA,cAACR,EAAA,EAAKO,KAAN,CAAW1I,MAAO,CAAEN,SAAU,QAA9B,qFAON,cAACuI,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACE1H,UAAU,UACVT,MAAO,CACLf,MAAO,QACPH,QAAS,KACTuJ,UAAW,SACXlC,gBAAiB,YANrB,SASE,eAACgC,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKK,MAAN,CACExI,MAAO,CAAEN,SAAU,SAAUiJ,QAAS,OADxC,gCAKA,cAACR,EAAA,EAAKO,KAAN,CAAW1I,MAAO,CAAEN,SAAU,QAA9B,+FAYhB,sBAAKe,UAAU,aAAf,UACE,qBAAIT,MAAO,CAAER,MAAO,UAAW6I,UAAW,UAA1C,UACG,IADH,mBAIA,qBAAK5H,UAAU,kBAAf,SACE,cAACuH,EAAA,EAAD,UACE,eAACsB,EAAA,EAAD,CACEtJ,MAAO,CACLnB,QAAS,OACTM,cAAe,MACfyK,SAAU,OACVtK,eAAgB,SAChBuK,UAAW,QANf,UASE,cAAC5B,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACEnI,MAAO,CACLT,WAAY,UACZC,MAAO,QACPJ,aAAc,SACdiJ,UAAW,UALf,SAQE,eAACF,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKC,IAAN,CACEpI,MAAO,CACLP,aAAc,OACdqK,UAAW,QACXjE,SAAU,SAEZE,IAAKwD,KAGP,mDACA,gDAKN,cAACtB,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACEnI,MAAO,CACLT,WAAY,UACZC,MAAO,QACPJ,aAAc,SACdiJ,UAAW,UALf,SAQE,eAACF,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKC,IAAN,CACEpI,MAAO,CACLP,aAAc,OACdqK,UAAW,QACXjE,SAAU,SAEZE,IAAKgE,KAEP,mDACA,gDAKN,cAAC9B,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACEnI,MAAO,CACLT,WAAY,UACZC,MAAO,QACPJ,aAAc,SACdiJ,UAAW,UALf,SAQE,eAACF,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKC,IAAN,CACEpI,MAAO,CACLP,aAAc,OACdqK,UAAW,QACXjE,SAAU,SAEZE,IAAKiE,KAEP,mDACA,gDAKN,cAAC/B,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACEnI,MAAO,CACLT,WAAY,UACZC,MAAO,QACPJ,aAAc,SACdiJ,UAAW,UALf,SAQE,eAACF,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKC,IAAN,CACEpI,MAAO,CACLP,aAAc,OACdqK,UAAW,QACXjE,SAAU,SAEZE,IAAKkE,KAEP,mDACA,gDAKN,cAAChC,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACEnI,MAAO,CACLT,WAAY,UACZC,MAAO,QACPJ,aAAc,SACdiJ,UAAW,UALf,SAQE,eAACF,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKC,IAAN,CACEpI,MAAO,CACLP,aAAc,OACdqK,UAAW,QACXjE,SAAU,SAEZE,IAAKmE,KAEP,mDACA,gDAKN,cAACjC,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACEnI,MAAO,CACLT,WAAY,UACZC,MAAO,QACPJ,aAAc,SACdiJ,UAAW,UALf,SAQE,eAACF,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKC,IAAN,CACEpI,MAAO,CACLP,aAAc,OACdqK,UAAW,QACXjE,SAAU,SAEZE,IAAK2D,KAGP,mDACA,gDAKN,cAACzB,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACEnI,MAAO,CACLT,WAAY,UACZC,MAAO,QACPJ,aAAc,SACdiJ,UAAW,UALf,SAQE,eAACF,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKC,IAAN,CACEpI,MAAO,CACLP,aAAc,OACdqK,UAAW,QACXjE,SAAU,SAEZE,IAAK0D,KAEP,mDACA,gDAIN,cAACxB,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACEnI,MAAO,CACLT,WAAY,UACZC,MAAO,QACPJ,aAAc,SACdiJ,UAAW,UALf,SAQE,eAACF,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKC,IAAN,CACEpI,MAAO,CACLP,aAAc,OACdqK,UAAW,QACXjE,SAAU,SAEZE,IAAKyD,KAEP,mDACA,0DAQd,sBAAK/I,UAAU,aAAf,UACE,oBAAIT,MAAO,CAAER,MAAO,UAAW6I,UAAW,UAA1C,4CAGA,cAAC,IAAD,UACE,eAACL,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACE1H,UAAU,SACVzM,GAAG,UACHgM,MAAO,CACLf,MAAO,QAEPQ,aAAc,QANlB,SASE,eAAC0I,EAAA,EAAKI,KAAN,CAAWvI,MAAO,GAAlB,UACE,cAACmI,EAAA,EAAKC,IAAN,CAAUvG,QAAQ,MAAMkE,IAAK0D,KAC7B,sBAAKhJ,UAAU,OAAf,UACE,gCACE,oBAAIT,MAAO,CAAER,MAAO,SAApB,+BACA,oBAAIQ,MAAO,CAAER,MAAO,QAASmJ,QAAS,OAAtC,qBAGA,oBAAI3I,MAAO,CAAER,MAAO,QAASmJ,QAAS,OAAtC,sBAEF,gCACE,wBACE3I,MAAO,CACLmG,gBAAiB,UACjB1G,aAAc,OACdD,MAAO,QACPP,MAAO,OACPkL,YAAa,QANjB,iBAWA,oBAAInK,MAAO,CAAER,MAAO,QAASmJ,QAAS,OAAtC,yBAGA,oBAAI3I,MAAO,CAAER,MAAO,SAApB,iCAMV,cAACyI,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACE1H,UAAU,SACVzM,GAAG,UACHgM,MAAO,CACLf,MAAO,QAEPQ,aAAc,QANlB,SASE,eAAC0I,EAAA,EAAKI,KAAN,CAAWvI,MAAO,GAAlB,UACE,cAACmI,EAAA,EAAKC,IAAN,CAAUvG,QAAQ,MAAMkE,IAAKwD,KAC7B,sBAAK9I,UAAU,OAAf,UACE,gCACE,oBAAIT,MAAO,CAAER,MAAO,SAApB,+BACA,oBAAIQ,MAAO,CAAER,MAAO,QAASmJ,QAAS,OAAtC,qBAGA,oBAAI3I,MAAO,CAAER,MAAO,QAASmJ,QAAS,OAAtC,sBAEF,gCACE,wBACE3I,MAAO,CACLmG,gBAAiB,UACjB1G,aAAc,OACdD,MAAO,QACPP,MAAO,OACPkL,YAAa,QANjB,iBAWA,oBAAInK,MAAO,CAAER,MAAO,QAASmJ,QAAS,OAAtC,yBAGA,oBAAI3I,MAAO,CAAER,MAAO,SAApB,iCAMV,cAACyI,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACE1H,UAAU,SACVzM,GAAG,UACHgM,MAAO,CACLf,MAAO,QAEPQ,aAAc,QANlB,SASE,eAAC0I,EAAA,EAAKI,KAAN,CAAWvI,MAAO,GAAlB,UACE,cAACmI,EAAA,EAAKC,IAAN,CAAUvG,QAAQ,MAAMkE,IAAKiE,KAC7B,sBAAKvJ,UAAU,OAAf,UACE,gCACE,oBAAIT,MAAO,CAAER,MAAO,SAApB,+BACA,oBAAIQ,MAAO,CAAER,MAAO,QAASmJ,QAAS,OAAtC,qBAGA,oBAAI3I,MAAO,CAAER,MAAO,QAASmJ,QAAS,OAAtC,sBAEF,gCACE,wBACE3I,MAAO,CACLmG,gBAAiB,UACjB1G,aAAc,OACdD,MAAO,QACPP,MAAO,OACPkL,YAAa,QANjB,iBAWA,oBAAInK,MAAO,CAAER,MAAO,QAASmJ,QAAS,OAAtC,yBAGA,oBAAI3I,MAAO,CAAER,MAAO,SAApB,iCAMV,cAACyI,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACE1H,UAAU,SACVzM,GAAG,UACHgM,MAAO,CACLf,MAAO,QAEPQ,aAAc,QANlB,SASE,eAAC0I,EAAA,EAAKI,KAAN,CAAWvI,MAAO,GAAlB,UACE,cAACmI,EAAA,EAAKC,IAAN,CAAUvG,QAAQ,MAAMkE,IAAK2D,KAC7B,sBAAKjJ,UAAU,OAAf,UACE,gCACE,oBAAIT,MAAO,CAAER,MAAO,SAApB,+BACA,oBAAIQ,MAAO,CAAER,MAAO,QAASmJ,QAAS,OAAtC,qBAGA,oBAAI3I,MAAO,CAAER,MAAO,QAASmJ,QAAS,OAAtC,sBAEF,gCACE,wBACE3I,MAAO,CACLmG,gBAAiB,UACjB1G,aAAc,OACdD,MAAO,QACPP,MAAO,OACPkL,YAAa,QANjB,iBAWA,oBAAInK,MAAO,CAAER,MAAO,QAASmJ,QAAS,OAAtC,yBAGA,oBAAI3I,MAAO,CAAER,MAAO,SAApB,yCAShB,qBAAKxL,GAAG,sBC59BC,OAA0B,iCCsC1BoW,GAjBC,WACZ,OAEO,qBAAK3J,UAAU,aAAf,SACT,eAAC0H,EAAA,EAAD,CAAMnI,MAAO,CAAEf,MAAO,OAAOoJ,UAAW,SAAUlC,gBAAiB,YAAnE,UACE,cAACgC,EAAA,EAAKC,IAAN,CAAUvG,QAAQ,MAAMkE,IAAKsE,KAC7B,cAAClC,EAAA,EAAKI,KAAN,UACE,cAACJ,EAAA,EAAKO,KAAN,2D,0FCHAhK,GAAQ4L,aAAY,CACxBC,QAAS,CACPC,KAAM,UAiBJtX,GAboB,WACxB,IAKE,OAJuB,IAAI/C,IAAYC,UACrCqa,gDAIF,MAAOlM,GAEP,YADAjN,QAAQC,IAAI,qCAAsCgN,IAK/BmM,GACjBC,GAAUF,SACVhH,GAAUgH,uCACVha,GAAa,IAAIN,IAAYya,WACvBnH,IAuCGoH,GAlCH,WACV,IAAMC,EAAWnH,mBAAQ,kBAAMoH,wBAAcJ,MAAU,IAEjDK,EAAUrH,mBACd,iBAAM,CACJsH,eACAC,eACAC,eACAC,aAAgB,CAAET,aAClBU,aAAyB,CAAEV,gBAE7B,IAGF,OACE,cAACW,GAAA,EAAD,CAAe5M,MAAOA,GAAtB,SACE,cAAC6M,GAAA,EAAD,CAAoBT,SAAUA,EAA9B,SACE,cAACU,GAAA,EAAD,CAAgBR,QAASA,EAASS,aAAW,EAA7C,SACE,eAAC,IAAD,WACC,cAAC,GAAD,IACC,cAAC,EAAD,CACEvY,eAAgBA,GAChBzC,WAAYA,GACZuU,UAzBkB,IA0BlBvB,QAASA,KAEX,cAAC,GAAD,cCjEGiI,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB9P,MAAK,YAAkD,IAA/C+P,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,qBCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFzH,SAASC,eAAe,SAM1B8G,M,8UCNarJ,EAAS,SAAC3Q,GACrB,GAAKA,EAIL,OAAO,IAAI2K,KAAwB,IAAnB3K,EAAMmC,aAGlBwY,EAAiB,IAAIC,KAAKC,aAAa,QAAS,CACpDvM,MAAO,UACPwM,sBAAuB,EACvBC,sBAAuB,IAGZ/F,EAAe,CAC1BgG,OAAQ,SAACC,GACP,OAAKA,EAIEN,EAAeK,OAAOC,GAHpB,MAKXhG,SAAU,SAACgG,GACT,GAAKA,EAIL,OAAOA,EAAI9Y,WAAa+Y,qBAIfha,EACX,IAAIzC,IAAYC,UAAU,gDAEf8G,EAAQ,IAAI/G,IAAYC,UACnC,+CAGWuF,EAAa,uCAAG,WAC3BZ,EACA8X,GAF2B,SAAAnc,EAAA,sEAIdP,IAAYC,UAAU4E,mBACjC,CAAC6X,EAAM5X,WAAYxC,IAAiBwC,WAAYF,EAAKE,YACrDrC,GANyB,mFAAH,wDAUbuE,EAAgB,uCAAG,WAC9BJ,GAD8B,SAAArG,EAAA,sEAGjBP,IAAYC,UAAU4E,mBACjC,CAAC+B,EAAkB9B,WAAYnC,EAAOC,KAAK,WAC3CmE,GAL4B,mFAAH,sDAShBJ,EAAe,uCAAG,WAC7BvC,EACAwC,GAF6B,SAAArG,EAAA,sEAIhBP,IAAYC,UAAU4E,mBACjC,CACET,EAAOU,WACPnC,EAAOC,KAAK,WACZD,EAAOC,KAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAClCgE,EAAkB9B,YAEpBiC,GAX2B,mFAAH,0D","file":"static/js/main.a1c08fa5.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { SystemProgram, SYSVAR_SLOT_HASHES_PUBKEY } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('collection_authority'),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA,\n    );\n  if (collectionPDAAccount) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA,\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA,\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        remainingAccounts.push(\n          ...[\n            {\n              pubkey: collectionPDA,\n              isWritable: true,\n              isSigner: false,\n            },\n            {\n              pubkey: collectionMint,\n              isWritable: false,\n              isSigner: false,\n            },\n            {\n              pubkey: collectionMetadata,\n              isWritable: true,\n              isSigner: false,\n            },\n            {\n              pubkey: collectionMasterEdition,\n              isWritable: false,\n              isSigner: false,\n            },\n            {\n              pubkey: collectionAuthorityRecord,\n              isWritable: false,\n              isSigner: false,\n            },\n          ],\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch(reason => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i);\n          // Return the txn we failed on by index\n          return {\n            number: breakEarlyObject.i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: '#384457',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: '#384457',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n  }),\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState } from 'react';\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  isActive: boolean;\n}) => {\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [clicked, setClicked] = useState(false);\n\n  useEffect(() => {\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n      onMint();\n      setClicked(false);\n    }\n  }, [gatewayStatus, clicked, setClicked, onMint]);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return 'WHITELIST MINT';\n    } else if (clicked && candyMachine?.state.gatekeeper) {\n      return <CircularProgress />;\n    }\n\n    return 'MINT';\n  };\n\n  return (\n    <CTAButton\n      disabled={clicked || isMinting || !isActive}\n      onClick={async () => {\n        setClicked(true);\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\n            setClicked(true);\n          } else {\n            await requestGatewayToken();\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/img4.813fc2c4.png\";","import { useEffect, useMemo, useState, useCallback } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n} from \"./candy-machine\";\nimport { AlertState, toDate, formatNumber, getAtaForMint } from \"./utils\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport img4 from \"./img4.png\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection\n        );\n        let active =\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n        let presale = false;\n        // whitelist mint?\n        if (cndy?.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (\n            cndy.state.whitelistMintSettings.presale &&\n            (!cndy.state.goLiveDate ||\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n          ) {\n            presale = true;\n          }\n          // is there a discount?\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined);\n            // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          }\n          // retrieves the whitelist token\n          const mint = new anchor.web3.PublicKey(\n            cndy.state.whitelistMintSettings.mint\n          );\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(\n              token\n            );\n            let valid = parseInt(balance.value.amount) > 0;\n            // only whitelist the user if the balance > 0\n            setIsWhitelistUser(valid);\n            active = (presale && valid) || active;\n          } catch (e) {\n            setIsWhitelistUser(false);\n            // no whitelist user, no mint\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n            console.log(\"There was a problem fetching whitelist token balance\");\n            console.log(e);\n          }\n        }\n        // datetime to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n          if (\n            cndy.state.endSettings.number.toNumber() <\n            new Date().getTime() / 1000\n          ) {\n            active = false;\n          }\n        }\n        // amount to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.amount) {\n          let limit = Math.min(\n            cndy.state.endSettings.number.toNumber(),\n            cndy.state.itemsAvailable\n          );\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        setIsActive((cndy.state.isActive = active));\n        setIsPresale((cndy.state.isPresale = presale));\n        setCandyMachine(cndy);\n      } catch (e) {\n        console.log(\"There was a problem fetching Candy Machine state\");\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  const onMint = async () => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById(\"#identity\")?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        const mintTxId = (\n          await mintOneToken(candyMachine, wallet.publicKey)\n        )[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction Timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the lastest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  const TitanDogImage = styled(\"img\")`\n    width: 100%;\n    height: 350px;\n    object-fit: cover;\n    object-position: top;\n    margin-bottom: 30px;\n    border-radius: 10%;\n  `;\n\n  return (\n    <div className=\"App-header\">\n      <Container style={{ marginTop: 100 }}>\n        <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\n          <TitanDogImage src={img4} alt=\"titandog\" />\n          <Paper\n            style={{\n              padding: 24,\n              paddingBottom: 15,\n              backgroundColor: \"#151A1F\",\n              borderRadius: 25,\n            }}\n          >\n            {!wallet.connected ? (\n              <ConnectButton>Connect Wallet</ConnectButton>\n            ) : (\n              <>\n                {candyMachine && (\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justifyContent=\"center\"\n                    wrap=\"nowrap\"\n                  >\n                    <Grid item xs={3}>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        Remaining\n                      </Typography>\n                      <Typography\n                        variant=\"h6\"\n                        color=\"textPrimary\"\n                        style={{\n                          fontWeight: \"bold\",\n                        }}\n                      >\n                        {`${itemsRemaining}`}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={4}>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        {isWhitelistUser && discountPrice\n                          ? \"Discount Price\"\n                          : \"Price\"}\n                      </Typography>\n                      <Typography\n                        variant=\"h6\"\n                        color=\"textPrimary\"\n                        style={{ fontWeight: \"bold\" }}\n                      >\n                        {isWhitelistUser && discountPrice\n                          ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                          : `◎ ${formatNumber.asNumber(\n                              candyMachine.state.price\n                            )}`}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={5}>\n                      {isActive && endDate && Date.now() < endDate.getTime() ? (\n                        <>\n                          <MintCountdown\n                            key=\"endSettings\"\n                            date={getCountdownDate(candyMachine)}\n                            style={{ justifyContent: \"flex-end\" }}\n                            status=\"COMPLETED\"\n                            onComplete={toggleMintButton}\n                          />\n                          <Typography\n                            variant=\"caption\"\n                            align=\"center\"\n                            display=\"block\"\n                            style={{ fontWeight: \"bold\" }}\n                          >\n                            TO END OF MINT\n                          </Typography>\n                        </>\n                      ) : (\n                        <>\n                          <MintCountdown\n                            key=\"goLive\"\n                            date={getCountdownDate(candyMachine)}\n                            style={{ justifyContent: \"flex-end\" }}\n                            status={\n                              candyMachine?.state?.isSoldOut ||\n                              (endDate && Date.now() > endDate.getTime())\n                                ? \"COMPLETED\"\n                                : isPresale\n                                ? \"PRESALE\"\n                                : \"LIVE\"\n                            }\n                            onComplete={toggleMintButton}\n                          />\n                          {isPresale &&\n                            candyMachine.state.goLiveDate &&\n                            candyMachine.state.goLiveDate.toNumber() >\n                              new Date().getTime() / 1000 && (\n                              <Typography\n                                variant=\"caption\"\n                                align=\"center\"\n                                display=\"block\"\n                                style={{ fontWeight: \"bold\" }}\n                              >\n                                UNTIL PUBLIC MINT\n                              </Typography>\n                            )}\n                        </>\n                      )}\n                    </Grid>\n                  </Grid>\n                )}\n                <MintContainer>\n                  {candyMachine?.state.isActive &&\n                  candyMachine?.state.gatekeeper &&\n                  wallet.publicKey &&\n                  wallet.signTransaction ? (\n                    <GatewayProvider\n                      wallet={{\n                        publicKey:\n                          wallet.publicKey ||\n                          new PublicKey(CANDY_MACHINE_PROGRAM),\n                        //@ts-ignore\n                        signTransaction: wallet.signTransaction,\n                      }}\n                      gatekeeperNetwork={\n                        candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                      }\n                      clusterUrl={rpcUrl}\n                      options={{ autoShowModal: false }}\n                    >\n                      <MintButton\n                        candyMachine={candyMachine}\n                        isMinting={isUserMinting}\n                        onMint={onMint}\n                        isActive={isActive || (isPresale && isWhitelistUser)}\n                      />\n                    </GatewayProvider>\n                  ) : (\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      onMint={onMint}\n                      isActive={isActive || (isPresale && isWhitelistUser)}\n                    />\n                  )}\n                </MintContainer>\n              </>\n            )}\n            {/* <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: 'grey' }}\n          >\n            Powered by METAPLEX\n          </Typography> */}\n          </Paper>\n        </Container>\n\n        <Snackbar\n          open={alertState.open}\n          autoHideDuration={6000}\n          onClose={() => setAlertState({ ...alertState, open: false })}\n        >\n          <Alert\n            onClose={() => setAlertState({ ...alertState, open: false })}\n            severity={alertState.severity}\n          >\n            {alertState.message}\n          </Alert>\n        </Snackbar>\n      </Container>\n    </div>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined\n  );\n};\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/evel.e145c90f.png\";","export default __webpack_public_path__ + \"static/media/dottet circle.16ef26e7.png\";","export default __webpack_public_path__ + \"static/media/header circek background.cb1bf6d7.png\";","export default __webpack_public_path__ + \"static/media/0.788ee608.png\";","export default __webpack_public_path__ + \"static/media/194.9921cf51.png\";","export default __webpack_public_path__ + \"static/media/195.751badf4.png\";","export default __webpack_public_path__ + \"static/media/197.70a4329f.png\";","export default __webpack_public_path__ + \"static/media/img3.8d7398fb.png\";","export default __webpack_public_path__ + \"static/media/img193.493820dc.png\";","export default __webpack_public_path__ + \"static/media/199.5b06e838.png\";","export default __webpack_public_path__ + \"static/media/198.ecf9b262.png\";","export default __webpack_public_path__ + \"static/media/196.a803c679.png\";","import \"./Navbar1.css\";\r\nimport {\r\n  Card,\r\n  Col,\r\n  Row,\r\n  Navbar,\r\n  Container,\r\n  CardGroup,\r\n  Button,\r\n  Nav,\r\n} from \"react-bootstrap\";\r\nimport imgpotato from \"../components/Potato nft  (2)/evel.png\";\r\nimport img31 from \"../components/Potato nft  (2)/dottet circle.png\";\r\nimport img10 from \"../components/Potato nft  (2)/header circek background.png\";\r\nimport img0 from \"./0.png\";\r\nimport img194 from \"./194.png\";\r\nimport img195 from \"./195.png\";\r\nimport img197 from \"./197.png\";\r\nimport img3 from \"./img3.png\";\r\nimport img193 from \"./img193.png\";\r\nimport img199 from \"./199.png\";\r\nimport img198 from \"./198.png\";\r\nimport img196 from \"./196.png\";\r\nimport img6 from \"./img6.png\";\r\n\r\nconst Navbar1 = () => {\r\n  return (\r\n    <div className=\"maindiv\">\r\n      <Navbar expand=\"sm\" variant=\"dark\" bg=\"dark\">\r\n        <Navbar.Brand\r\n          style={{ paddingLeft: \"20px\", cursor: \"pointer\" }}\r\n          href=\"#home\"\r\n        >\r\n          Potato Head\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav.Link id=\"link\" style={{ cursor: \"pointer\" }} href=\"#about\">\r\n            About\r\n          </Nav.Link>\r\n          <Nav.Link id=\"link\" style={{ cursor: \"pointer\" }} href=\"#benefit\">\r\n            Benefit\r\n          </Nav.Link>\r\n          <Nav.Link id=\"link\" style={{ cursor: \"pointer\" }} href=\"#collection\">\r\n            Collection\r\n          </Nav.Link>\r\n          <Nav.Link id=\"link\" style={{ cursor: \"pointer\" }} href=\"#intro\">\r\n            Roadmap\r\n          </Nav.Link>\r\n          <Nav.Link\r\n            id=\"button-connect\"\r\n            style={{ cursor: \"pointer\" }}\r\n            href=\"#connectwallet\"\r\n          >\r\n            Connect Wallet\r\n          </Nav.Link>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n\r\n      <div className=\"App-header\">\r\n        <Container>\r\n          <Row>\r\n            <Col style={{ paddingTop: \"5%\", paddingBottom: \"10%\" }}>\r\n              <Card.Img\r\n                variant=\"top\"\r\n                style={{\r\n                  textAlign: \"center\",\r\n                  padding: \"30px\",\r\n                }}\r\n                src={img10}\r\n              />\r\n              <Card\r\n                style={{\r\n                  marginTop: \"-100%\",\r\n                  width: \"100%\",\r\n                  textAlign: \"center\",\r\n                  backgroundColor: \" #0F0F23\",\r\n                  paddingTop: \"2%\",\r\n                }}\r\n              >\r\n                <Card.Body className=\"card123\">\r\n                  <Card.Title className=\"cardtitle\">Discover, find,</Card.Title>\r\n                  <Card.Subtitle className=\"cardsubtitle\">\r\n                    Sell extraordinary\r\n                  </Card.Subtitle>\r\n\r\n                  <h1 className=\"cardtitle144\">Potato NFTs</h1>\r\n                  <Card.Text className=\"text-lg\" style={{ opacity: \"0.6\" }}>\r\n                    Marketplace for potato character collections non fungible\r\n                    token NFTs\r\n                  </Card.Text>\r\n                  <Button\r\n                    className=\"button155\"\r\n                    style={{ marginTop: \"4%\", marginLeft: \"4%\" }}\r\n                  >\r\n                    How it Works\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n\r\n            <Col>\r\n              <Card\r\n                className=\"devilpotatocard\"\r\n                style={{\r\n                  background:\r\n                    \"linear-gradient(90deg, #241D40 0%, #1C2946 100%)\",\r\n                  height: \"80%\",\r\n                  width: \"80%\",\r\n                  marginTop: \"50px\",\r\n                  borderRadius: \"35px\",\r\n                  borderColor: \"#374153\",\r\n                }}\r\n              >\r\n                <Card.Body>\r\n                  <div style={{ fontSize: \"2.8rem\" }}>\r\n                    Devil Potato\r\n                    <Card.Img src={imgpotato} />\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      <div className=\"App-header\">\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <Card\r\n                style={{\r\n                  width: \"20rem\",\r\n                  background:\r\n                    \"linear-gradient(90deg, #241D40 0%, #1C2946 100%)\",\r\n                  borderRadius: \"15px\",\r\n                }}\r\n              >\r\n                <Card.Body\r\n                  style={{\r\n                    background:\r\n                      \"linear-gradient(90deg, #241D40 0%, #1C2946 100%)\",\r\n                    borderRadius: \"30px\",\r\n                  }}\r\n                >\r\n                  <Card.Img variant=\"top\" src={img3} />\r\n                  <div style={{ textAlign: \"center\" }}>\r\n                    <div>Potato1</div>\r\n                    <div>#1234</div>\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            <Col>\r\n              <h1\r\n                id=\"about\"\r\n                style={{\r\n                  color: \"#68CEEE\",\r\n                  paddingBottom: \"1.4rem\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                About Us\r\n              </h1>\r\n              <h1 style={{ textAlign: \"center\" }}>What is an NFT? </h1>\r\n              <Card\r\n                style={{\r\n                  backgroundColor: \"#232c64\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                <Card.Body>\r\n                  <div style={{ width: \"100%\" }}>\r\n                    An NFT, which stands for non-fungible token, is a unique\r\n                    unit of data employing technology that allows digital\r\n                    content—from videos to songs to images—to become logged and\r\n                    authenticated on cryptocurrency blockchains, primarily\r\n                    Ethereum.The main impact of NFTs is making it easy to own\r\n                    and sell digital content.\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      <div className=\"App-header\">\r\n        <Card\r\n          style={{\r\n            border: \"none\",\r\n            width: \"100%\",\r\n            textAlign: \"center\",\r\n            backgroundColor: \"#0F0F23\",\r\n            display: \"inline\",\r\n            objectFit: \"cover\",\r\n            backgroundImage: `url(${img31})`,\r\n          }}\r\n        >\r\n          <Card.Body>\r\n            <Card.Img\r\n              style={{ height: \"auto\", width: \"100%\", zIndex: \"2\" }}\r\n              src={img31}\r\n            />\r\n            <Card.ImgOverlay>\r\n              <Card.Title id=\"collection\" className=\"mb-2\">\r\n                {\" \"}\r\n                Collections\r\n              </Card.Title>\r\n              {/* <Card.Subtitle className=\"mb-2 text-muted\">Sell extraordinary</Card.Subtitle> */}\r\n              <h4\r\n                style={{\r\n                  fontWeight: \"700\",\r\n                  fontSize: \"3rem\",\r\n                  position: \"relative\",\r\n                  zIndex: \"2\",\r\n                }}\r\n              >\r\n                Are you curious to our\r\n              </h4>\r\n              <h1\r\n                style={{\r\n                  fontWeight: \"700\",\r\n                  fontSize: \"560%\",\r\n                  color: \"#67CDF1\",\r\n                }}\r\n              >\r\n                {\" \"}\r\n                Potato NFTs\r\n              </h1>\r\n              <Card.Text className=\"text-lg\" style={{ fontSize: \"1.3rem\" }}>\r\n                Marketplace for potato character collections non fungible token\r\n                NFTs\r\n              </Card.Text>\r\n              <Button\r\n                className=\"button155\"\r\n                style={{ marginTop: \"4%\", marginLeft: \"4%\" }}\r\n              >\r\n                Check Our Collection\r\n              </Button>\r\n            </Card.ImgOverlay>\r\n          </Card.Body>\r\n        </Card>\r\n        <Container></Container>\r\n      </div>\r\n\r\n      <div className=\"App-header\">\r\n        <Row>\r\n          <CardGroup id=\"card555\">\r\n            <Col>\r\n              <Card\r\n                className=\"card55\"\r\n                style={{\r\n                  width: \"15rem\",\r\n                  backgroundColor: \"#232c64\",\r\n                  borderRadius: \"15px\",\r\n                }}\r\n              >\r\n                <Card.Body>\r\n                  <Card.Img variant=\"top\" src={img198} />\r\n                  <div className=\"new\">\r\n                    <div>\r\n                      <h5>AngryPotato1</h5>\r\n                      <h6>#1234</h6>\r\n                      <button\r\n                        style={{\r\n                          backgroundColor: \"#3C47DF\",\r\n                          borderRadius: \"15px\",\r\n                          color: \"white\",\r\n                          width: \"100%\",\r\n                        }}\r\n                      >\r\n                        Common\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            <Col>\r\n              <Card\r\n                className=\"card55\"\r\n                style={{\r\n                  width: \"15rem\",\r\n                  backgroundColor: \"#232c64\",\r\n                  borderRadius: \"15px\",\r\n                }}\r\n              >\r\n                <Card.Body style={{}}>\r\n                  <Card.Img variant=\"top\" src={img193} />\r\n                  <div className=\"new\">\r\n                    <div>\r\n                      <h5>AngryPotato1</h5>\r\n                      <h6>#1234</h6>\r\n                      <button\r\n                        style={{\r\n                          backgroundColor: \"#DFBD36\",\r\n                          borderRadius: \"15px\",\r\n                          color: \"white\",\r\n                          width: \"100%\",\r\n                        }}\r\n                      >\r\n                        Common\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            <Col>\r\n              <Card\r\n                className=\"card55\"\r\n                style={{\r\n                  width: \"15rem\",\r\n                  backgroundColor: \"#232c64\",\r\n                  borderRadius: \"15px\",\r\n                }}\r\n              >\r\n                <Card.Body style={{}}>\r\n                  <Card.Img variant=\"top\" src={img199} />\r\n                  <div className=\"new\">\r\n                    <div>\r\n                      <h5>AngryPotato1</h5>\r\n                      <h6>#1234</h6>\r\n                      <button\r\n                        style={{\r\n                          backgroundColor: \"#DF4037\",\r\n                          borderRadius: \"15px\",\r\n                          color: \"white\",\r\n                          width: \"100%\",\r\n                        }}\r\n                      >\r\n                        Common\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            <Col>\r\n              <Card\r\n                className=\"card55\"\r\n                style={{\r\n                  width: \"15rem\",\r\n                  backgroundColor: \"#232c64\",\r\n                  borderRadius: \"15px\",\r\n                }}\r\n              >\r\n                <Card.Body style={{}}>\r\n                  <Card.Img variant=\"top\" src={img196} />\r\n                  <div className=\"new\">\r\n                    <div>\r\n                      <h5>AngryPotato1</h5>\r\n                      <h6>#1234</h6>\r\n                      <button\r\n                        style={{\r\n                          backgroundColor: \"#3C47DF\",\r\n                          borderRadius: \"15px\",\r\n                          color: \"white\",\r\n                          width: \"100%\",\r\n                        }}\r\n                      >\r\n                        Common\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </CardGroup>\r\n        </Row>\r\n      </div>\r\n\r\n      <div className=\"App-header\">\r\n        <Container>\r\n          <Row>\r\n            <Col style={{ textAlign: \"left\" }}>\r\n              <Card\r\n                style={{\r\n                  width: \"100%\",\r\n                  textAlign: \"left\",\r\n                  backgroundColor: \" #0F0F23\",\r\n                  border: \"none\",\r\n                }}\r\n              >\r\n                <Card.Body>\r\n                  <h1\r\n                    style={{\r\n                      color: \"#67CDF1\",\r\n                      fontWeight: \"700\",\r\n                      fontSize: \"3.7rem\",\r\n                    }}\r\n                    id=\"intro\"\r\n                  >\r\n                    Introduce\r\n                  </h1>\r\n                </Card.Body>\r\n              </Card>\r\n              <Card\r\n                style={{\r\n                  width: \"100%\",\r\n                  textAlign: \"left\",\r\n                  backgroundColor: \" #0F0F23\",\r\n                  border: \"none\",\r\n                }}\r\n              >\r\n                <Card.Body>\r\n                  <h1\r\n                    style={{\r\n                      color: \"#67CDF1\",\r\n                      fontWeight: \"700\",\r\n                      fontSize: \"3.7rem\",\r\n                    }}\r\n                  >\r\n                    Ourselves\r\n                  </h1>\r\n                </Card.Body>\r\n              </Card>\r\n              <h6 style={{ color: \"#84BDC4\" }}>\r\n                1000 total Potato-Head each awesome and unique. Although all are\r\n                awesome some are more awesome than others. Each one is hand\r\n                drawn and randomly generated from 143+ possible traits ranging\r\n                from 7 categories: Background, Bottom lid, body, eyes, hands,\r\n                mouth, legs.\r\n              </h6>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"App-header\">\r\n                <div className=\"App-card\">\r\n                  <>\r\n                    <Card\r\n                      style={{\r\n                        width: \"100%\",\r\n                        backgroundColor: \" #0F0F23\",\r\n                        border: \"none\",\r\n                      }}\r\n                    >\r\n                      {/* <Card.Header></Card.Header> */}\r\n                      <Card.Body>\r\n                        <Card.Title style={{ fontSize: \"2rem\" }}>\r\n                          <span style={{ fontSize: \"4rem\" }}>01 </span>\r\n                          High-quality rendered and equally affordable artwork\r\n                        </Card.Title>\r\n                        <Card.Title></Card.Title>\r\n                      </Card.Body>\r\n                      <hr></hr>\r\n                    </Card>\r\n\r\n                    <Card\r\n                      style={{\r\n                        width: \"100%\",\r\n                        backgroundColor: \" #0F0F23\",\r\n                        border: \"none\",\r\n                      }}\r\n                    >\r\n                      {/* <Card.Header></Card.Header> */}\r\n                      <Card.Body>\r\n                        <Card.Title style={{ fontSize: \"2rem\" }}>\r\n                          <span style={{ fontSize: \"4rem\" }}>02 </span>\r\n                          Learning,researching, and studying the crypto market\r\n                          daily\r\n                        </Card.Title>\r\n                      </Card.Body>\r\n                      <hr></hr>\r\n                    </Card>\r\n\r\n                    <Card\r\n                      style={{\r\n                        width: \"100%\",\r\n                        backgroundColor: \" #0F0F23\",\r\n                        border: \"none\",\r\n                      }}\r\n                    >\r\n                      {/* <Card.Header></Card.Header> */}\r\n                      <Card.Body>\r\n                        <Card.Title style={{ fontSize: \"2rem\" }}>\r\n                          <span style={{ fontSize: \"4rem\" }}>03 </span>\r\n                          The immersive world of NFTs with all its collectors &\r\n                          projects\r\n                        </Card.Title>\r\n                      </Card.Body>\r\n                      <hr></hr>\r\n                    </Card>\r\n\r\n                    <Card\r\n                      style={{\r\n                        width: \"100%\",\r\n                        backgroundColor: \" #0F0F23\",\r\n                        border: \"none\",\r\n                      }}\r\n                    >\r\n                      {/* <Card.Header></Card.Header> */}\r\n                      <Card.Body>\r\n                        <Card.Title style={{ fontSize: \"2rem\" }}>\r\n                          <span style={{ fontSize: \"4rem\" }}>04 </span>\r\n                          Slow,steady and natural community growth within the\r\n                          Lazy Lounge Club\r\n                        </Card.Title>\r\n                      </Card.Body>\r\n                      <hr></hr>\r\n                    </Card>\r\n                  </>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      <div id=\"benefit\" className=\"App-header\">\r\n        <div className=\"App-card1\">\r\n          <Card\r\n            style={{\r\n              width: \"100%\",\r\n              textAlign: \"center\",\r\n              backgroundColor: \"#0F0F23\",\r\n              border: \"none\",\r\n            }}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Benefits</Card.Title>\r\n              <Card.Link href=\"#\" style={{ textDecoration: \"none\" }}>\r\n                <h1 style={{ color: \"#67CDF1\", textDecoration: \"none\" }}>\r\n                  What make us different?\r\n                </h1>\r\n              </Card.Link>\r\n            </Card.Body>\r\n          </Card>\r\n          <div className=\"App-header\">\r\n            <Container>\r\n              <Row>\r\n                <Col>\r\n                  <Card\r\n                    className=\"card155\"\r\n                    style={{\r\n                      width: \"25rem\",\r\n                      padding: \"8%\",\r\n                      textAlign: \"center\",\r\n                      backgroundColor: \" #181832\",\r\n                      // border:\"wh\"\r\n                    }}\r\n                  >\r\n                    <Card.Body>\r\n                      <Card.Title\r\n                        style={{ fontSize: \"1.5rem\", opacity: \"0.8\" }}\r\n                      >\r\n                        Explosive and rare tokens\r\n                      </Card.Title>\r\n                      <Card.Text style={{ fontSize: \"17px\" }}>\r\n                        With a hard limit at 10,00 and all copyrights held by\r\n                        the buyer\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                <Col>\r\n                  <Card\r\n                    className=\"card155\"\r\n                    style={{\r\n                      width: \"25rem\",\r\n                      padding: \"8%\",\r\n                      textAlign: \"center\",\r\n                      backgroundColor: \" #181832\",\r\n                    }}\r\n                  >\r\n                    <Card.Body>\r\n                      <Card.Title\r\n                        style={{ fontSize: \"1.5rem\", opacity: \"0.8\" }}\r\n                      >\r\n                        Community\r\n                      </Card.Title>\r\n                      <Card.Text style={{ fontSize: \"17px\" }}>\r\n                        Join our community to trade, play and display your pets\r\n                        and arts\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n                <Col>\r\n                  <Card\r\n                    className=\"card155\"\r\n                    style={{\r\n                      width: \"25rem\",\r\n                      padding: \"8%\",\r\n                      textAlign: \"center\",\r\n                      backgroundColor: \" #181832\",\r\n                    }}\r\n                  >\r\n                    <Card.Body>\r\n                      <Card.Title\r\n                        style={{ fontSize: \"1.5rem\", opacity: \"0.8\" }}\r\n                      >\r\n                        Members only space\r\n                      </Card.Title>\r\n                      <Card.Text style={{ fontSize: \"17px\" }}>\r\n                        Discussion board where you can have a say in the future\r\n                        of nft\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"App-header\">\r\n        <h1 style={{ color: \"#67CDF1\", textAlign: \"center\" }}>\r\n          {\" \"}\r\n          Our Top NFT's\r\n        </h1>\r\n        <div className=\"container-fluid\">\r\n          <Row>\r\n            <CardGroup\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                flexWrap: \"wrap\",\r\n                justifyContent: \"center\",\r\n                flexBasis: \"auto\",\r\n              }}\r\n            >\r\n              <Col>\r\n                <Card\r\n                  style={{\r\n                    background: \"#0F0F23\",\r\n                    color: \"white\",\r\n                    alignContent: \"center\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <Card.Body>\r\n                    <Card.Img\r\n                      style={{\r\n                        borderRadius: \"40px\",\r\n                        maxHeight: \"10rem\",\r\n                        maxWidth: \"10rem\",\r\n                      }}\r\n                      src={img198}\r\n                    />\r\n\r\n                    <h5>AngryPotato #0001</h5>\r\n                    <h6>0.5 SOL</h6>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n\r\n              <Col>\r\n                <Card\r\n                  style={{\r\n                    background: \"#0F0F23\",\r\n                    color: \"white\",\r\n                    alignContent: \"center\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <Card.Body>\r\n                    <Card.Img\r\n                      style={{\r\n                        borderRadius: \"40px\",\r\n                        maxHeight: \"10rem\",\r\n                        maxWidth: \"10rem\",\r\n                      }}\r\n                      src={img0}\r\n                    />\r\n                    <h5>AngryPotato #0002</h5>\r\n                    <h6>0.5 SOL</h6>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n\r\n              <Col>\r\n                <Card\r\n                  style={{\r\n                    background: \"#0F0F23\",\r\n                    color: \"white\",\r\n                    alignContent: \"center\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <Card.Body>\r\n                    <Card.Img\r\n                      style={{\r\n                        borderRadius: \"40px\",\r\n                        maxHeight: \"10rem\",\r\n                        maxWidth: \"10rem\",\r\n                      }}\r\n                      src={img197}\r\n                    />\r\n                    <h5>AngryPotato #0003</h5>\r\n                    <h6>0.5 SOL</h6>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n\r\n              <Col>\r\n                <Card\r\n                  style={{\r\n                    background: \"#0F0F23\",\r\n                    color: \"white\",\r\n                    alignContent: \"center\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <Card.Body>\r\n                    <Card.Img\r\n                      style={{\r\n                        borderRadius: \"40px\",\r\n                        maxHeight: \"10rem\",\r\n                        maxWidth: \"10rem\",\r\n                      }}\r\n                      src={img195}\r\n                    />\r\n                    <h5>AngryPotato #0004</h5>\r\n                    <h6>0.5 SOL</h6>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n\r\n              <Col>\r\n                <Card\r\n                  style={{\r\n                    background: \"#0F0F23\",\r\n                    color: \"white\",\r\n                    alignContent: \"center\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <Card.Body>\r\n                    <Card.Img\r\n                      style={{\r\n                        borderRadius: \"40px\",\r\n                        maxHeight: \"10rem\",\r\n                        maxWidth: \"10rem\",\r\n                      }}\r\n                      src={img194}\r\n                    />\r\n                    <h5>AngryPotato #0005</h5>\r\n                    <h6>0.5 SOL</h6>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n\r\n              <Col>\r\n                <Card\r\n                  style={{\r\n                    background: \"#0F0F23\",\r\n                    color: \"white\",\r\n                    alignContent: \"center\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <Card.Body>\r\n                    <Card.Img\r\n                      style={{\r\n                        borderRadius: \"40px\",\r\n                        maxHeight: \"10rem\",\r\n                        maxWidth: \"10rem\",\r\n                      }}\r\n                      src={img196}\r\n                    />\r\n\r\n                    <h5>AngryPotato #0006</h5>\r\n                    <h6>0.5 SOL</h6>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n\r\n              <Col>\r\n                <Card\r\n                  style={{\r\n                    background: \"#0F0F23\",\r\n                    color: \"white\",\r\n                    alignContent: \"center\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <Card.Body>\r\n                    <Card.Img\r\n                      style={{\r\n                        borderRadius: \"40px\",\r\n                        maxHeight: \"10rem\",\r\n                        maxWidth: \"10rem\",\r\n                      }}\r\n                      src={img199}\r\n                    />\r\n                    <h5>AngryPotato #0007</h5>\r\n                    <h6>0.5 SOL</h6>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n              <Col>\r\n                <Card\r\n                  style={{\r\n                    background: \"#0F0F23\",\r\n                    color: \"white\",\r\n                    alignContent: \"center\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <Card.Body>\r\n                    <Card.Img\r\n                      style={{\r\n                        borderRadius: \"40px\",\r\n                        maxHeight: \"10rem\",\r\n                        maxWidth: \"10rem\",\r\n                      }}\r\n                      src={img193}\r\n                    />\r\n                    <h5>AngryPotato #0008</h5>\r\n                    <h6>0.5 SOL</h6>\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n            </CardGroup>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n      <div className=\"App-header\">\r\n        <h1 style={{ color: \"#67CDF1\", textAlign: \"center\" }}>\r\n          Some masterpieces from creator\r\n        </h1>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <Card\r\n                className=\"card55\"\r\n                id=\"card555\"\r\n                style={{\r\n                  width: \"17rem\",\r\n                  // backgroundColor: \"#232c64\",\r\n                  borderRadius: \"15px\",\r\n                }}\r\n              >\r\n                <Card.Body style={{}}>\r\n                  <Card.Img variant=\"top\" src={img199} />\r\n                  <div className=\"Nft1\">\r\n                    <div>\r\n                      <h5 style={{ color: \"white\" }}>AngryPotato #0016</h5>\r\n                      <h6 style={{ color: \"white\", opacity: \"0.6\" }}>\r\n                        creator\r\n                      </h6>\r\n                      <h6 style={{ color: \"white\", opacity: \"0.6\" }}>Louis</h6>\r\n                    </div>\r\n                    <div>\r\n                      <button\r\n                        style={{\r\n                          backgroundColor: \"#5652FB\",\r\n                          borderRadius: \"15px\",\r\n                          color: \"white\",\r\n                          width: \"100%\",\r\n                          marginRight: \"40px\",\r\n                        }}\r\n                      >\r\n                        SOL\r\n                      </button>\r\n                      <h6 style={{ color: \"white\", opacity: \"0.6\" }}>\r\n                        Current Bid\r\n                      </h6>\r\n                      <h5 style={{ color: \"white\" }}> 0.05 </h5>\r\n                    </div>\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            <Col>\r\n              <Card\r\n                className=\"card55\"\r\n                id=\"card555\"\r\n                style={{\r\n                  width: \"17rem\",\r\n                  // backgroundColor: \"#232c64\",\r\n                  borderRadius: \"15px\",\r\n                }}\r\n              >\r\n                <Card.Body style={{}}>\r\n                  <Card.Img variant=\"top\" src={img198} />\r\n                  <div className=\"Nft1\">\r\n                    <div>\r\n                      <h5 style={{ color: \"white\" }}>AngryPotato #0089</h5>\r\n                      <h6 style={{ color: \"white\", opacity: \"0.6\" }}>\r\n                        creator\r\n                      </h6>\r\n                      <h6 style={{ color: \"white\", opacity: \"0.6\" }}>Louis</h6>\r\n                    </div>\r\n                    <div>\r\n                      <button\r\n                        style={{\r\n                          backgroundColor: \"#5652FB\",\r\n                          borderRadius: \"15px\",\r\n                          color: \"white\",\r\n                          width: \"100%\",\r\n                          marginRight: \"40px\",\r\n                        }}\r\n                      >\r\n                        SOL\r\n                      </button>\r\n                      <h6 style={{ color: \"white\", opacity: \"0.6\" }}>\r\n                        Current Bid\r\n                      </h6>\r\n                      <h5 style={{ color: \"white\" }}> 0.05 </h5>\r\n                    </div>\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            <Col>\r\n              <Card\r\n                className=\"card55\"\r\n                id=\"card555\"\r\n                style={{\r\n                  width: \"17rem\",\r\n                  // backgroundColor: \"#232c64\",\r\n                  borderRadius: \"15px\",\r\n                }}\r\n              >\r\n                <Card.Body style={{}}>\r\n                  <Card.Img variant=\"top\" src={img197} />\r\n                  <div className=\"Nft1\">\r\n                    <div>\r\n                      <h5 style={{ color: \"white\" }}>AngryPotato #0098</h5>\r\n                      <h6 style={{ color: \"white\", opacity: \"0.6\" }}>\r\n                        creator\r\n                      </h6>\r\n                      <h6 style={{ color: \"white\", opacity: \"0.6\" }}>Louis</h6>\r\n                    </div>\r\n                    <div>\r\n                      <button\r\n                        style={{\r\n                          backgroundColor: \"#5652FB\",\r\n                          borderRadius: \"15px\",\r\n                          color: \"white\",\r\n                          width: \"100%\",\r\n                          marginRight: \"40px\",\r\n                        }}\r\n                      >\r\n                        SOL\r\n                      </button>\r\n                      <h6 style={{ color: \"white\", opacity: \"0.6\" }}>\r\n                        Current Bid\r\n                      </h6>\r\n                      <h5 style={{ color: \"white\" }}> 0.05 </h5>\r\n                    </div>\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            <Col>\r\n              <Card\r\n                className=\"card55\"\r\n                id=\"card555\"\r\n                style={{\r\n                  width: \"17rem\",\r\n                  // backgroundColor: \"#232c64\",\r\n                  borderRadius: \"15px\",\r\n                }}\r\n              >\r\n                <Card.Body style={{}}>\r\n                  <Card.Img variant=\"top\" src={img196} />\r\n                  <div className=\"Nft1\">\r\n                    <div>\r\n                      <h5 style={{ color: \"white\" }}>AngryPotato #0192</h5>\r\n                      <h6 style={{ color: \"white\", opacity: \"0.6\" }}>\r\n                        creator\r\n                      </h6>\r\n                      <h6 style={{ color: \"white\", opacity: \"0.6\" }}>Louis</h6>\r\n                    </div>\r\n                    <div>\r\n                      <button\r\n                        style={{\r\n                          backgroundColor: \"#5652FB\",\r\n                          borderRadius: \"15px\",\r\n                          color: \"white\",\r\n                          width: \"100%\",\r\n                          marginRight: \"40px\",\r\n                        }}\r\n                      >\r\n                        SOL\r\n                      </button>\r\n                      <h6 style={{ color: \"white\", opacity: \"0.6\" }}>\r\n                        Current Bid\r\n                      </h6>\r\n                      <h5 style={{ color: \"white\" }}> 0.05 </h5>\r\n                    </div>\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      <div id=\"connectwallet\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar1;\r\n","export default __webpack_public_path__ + \"static/media/img5.99a43829.png\";","// import styled from \"styled-components\";\nimport {Card} from 'react-bootstrap';\nimport img5 from './img5.png';\n\n// const Container = styled(\"div\")`\n//     width: 100vw;\n//     height: auto;\n//     margin-top: 100px;\n//     padding: 20px;\n//     background-color: #283c34;\n\n//     display: flex;\n//     flex-direction: column;\n//     justify-content: center;\n//     align-items: center;\n// `\n\n// const ListItem = styled(\"li\")`\n//     margin: 10px;\n// `\n\nconst Roadmap = () => {\n    return (\n        \n           <div className='App-footer'>\n  <Card style={{ width: '100%',textAlign: 'center', backgroundColor: ' #282c34'}}>\n    <Card.Img variant=\"top\" src={img5} />\n    <Card.Body>\n      <Card.Text>\n        copyrights @ 2022-Allright reserved.\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  </div>\n        \n    )\n}\n\nexport default Roadmap;","import './App.css';\nimport { useMemo } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport Home from './Home';\nimport Navbar1 from './components/Navbar1';\nimport Roadmap from './components/Roadmap';\n\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\n\nimport { ThemeProvider, createTheme } from '@material-ui/core';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\n    );\n\n    return candyMachineId;\n  } catch (e) {\n    console.log('Failed to construct CandyMachineId', e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\n);\n\nconst txTimeoutInMilliseconds = 30000;\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n           <Navbar1 />\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={txTimeoutInMilliseconds}\n              rpcHost={rpcHost}\n            />\n            <Roadmap />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n"],"sourceRoot":""}